/* The following code was generated by JFlex 1.4.3 on 10/13/13 2:51 PM */

package org.dylanfoundry.deft.filetypes.dylan;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.dylanfoundry.deft.filetypes.dylan.psi.DylanTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/13/13 2:51 PM from the specification file
 * <tt>/Users/cek/Dev/dylan-lang/DeftIDEA/src/org/dylanfoundry/deft/filetypes/dylan/Dylan.flex</tt>
 */
class _DylanLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int WAITING_VALUE = 4;
  public static final int STRING = 10;
  public static final int YYINITIAL = 0;
  public static final int DYLAN_CODE = 6;
  public static final int COMMENT_BLOCK = 8;
  public static final int WAITING_SEPARATOR = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\41\1\40\1\0\1\43\1\37\22\0\1\42\1\3\1\44"+
    "\1\23\2\3\1\13\1\20\1\70\1\71\1\11\1\10\1\76\1\7"+
    "\1\36\1\12\1\21\1\26\6\30\2\1\1\16\1\77\1\14\1\5"+
    "\1\15\1\4\1\3\1\32\1\24\2\32\1\34\1\32\10\2\1\27"+
    "\10\2\1\31\2\2\1\72\1\17\1\73\1\13\1\100\1\0\1\33"+
    "\1\25\1\63\1\60\1\35\1\47\1\61\1\66\1\62\1\2\1\52"+
    "\1\54\1\65\1\50\1\55\1\64\1\2\1\22\1\51\1\46\1\67"+
    "\1\56\1\57\1\45\1\53\1\2\1\74\1\13\1\75\1\6\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\2\3\1\4\1\5\2\6\1\7"+
    "\1\10\2\11\1\7\1\12\1\13\1\1\1\14\1\15"+
    "\1\16\1\17\4\20\3\1\1\21\3\13\1\22\2\23"+
    "\1\24\17\13\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\3\36\3\37\1\40\4\0\1\12"+
    "\1\41\1\0\1\42\1\43\1\44\1\20\1\12\2\0"+
    "\1\45\1\36\1\0\1\46\1\0\1\20\1\47\1\0"+
    "\1\50\1\0\4\51\4\0\1\52\4\0\1\53\1\54"+
    "\2\0\1\55\1\56\1\13\1\57\10\13\1\12\2\0"+
    "\1\60\25\13\1\61\1\62\12\13\1\63\1\64\1\65"+
    "\1\12\2\0\1\46\1\0\2\46\1\0\1\20\5\0"+
    "\1\51\2\66\1\0\3\12\3\0\6\13\1\67\2\13"+
    "\1\70\1\13\1\71\2\13\1\72\6\13\1\73\30\13"+
    "\1\74\1\13\1\12\1\0\1\46\3\0\1\75\3\13"+
    "\1\76\4\13\1\77\1\100\1\101\3\13\1\102\7\13"+
    "\1\103\7\13\1\104\13\13\1\105\1\0\1\106\1\107"+
    "\1\110\1\111\1\112\11\13\1\113\4\13\1\114\6\13"+
    "\1\115\3\13\1\116\3\13\1\117\1\13\1\120\1\0"+
    "\2\13\1\121\1\122\2\13\1\123\10\13\1\124\1\13"+
    "\1\125\2\13\1\126\3\13\1\127\1\130\1\13\1\131"+
    "\1\0\2\13\1\132\3\13\1\133\10\13\1\134\1\135"+
    "\2\13\1\136\1\0\2\13\1\137\1\13\1\140\1\13"+
    "\1\141\6\13\1\142\1\13\1\143\1\13\1\144\1\13"+
    "\1\145\6\13\1\146\24\13\1\147\10\13\1\150\4\13";

  private static int [] zzUnpackAction() {
    int [] result = new int[437];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0186\0\u0249\0\u0186\0\u028a\0\u0186\0\u02cb\0\u030c"+
    "\0\u034d\0\u0186\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3"+
    "\0\u0514\0\u0555\0\u0555\0\u0451\0\u0596\0\u05d7\0\u0618\0\u0659"+
    "\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df\0\u0820\0\u0186"+
    "\0\u0186\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6\0\u09e7"+
    "\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef"+
    "\0\u0186\0\u0186\0\u0186\0\u0186\0\u0186\0\u0186\0\u0186\0\u0186"+
    "\0\u0451\0\u0186\0\u0c30\0\u0c71\0\u0186\0\u0cb2\0\u028a\0\u0186"+
    "\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0451\0\u0186"+
    "\0\u0451\0\u0451\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0186\0\u0f7d"+
    "\0\u0fbe\0\u0fff\0\u1040\0\u1040\0\u0186\0\u1081\0\u10c2\0\u1103"+
    "\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b"+
    "\0\u0186\0\u134c\0\u138d\0\u13ce\0\u140f\0\u0186\0\u0186\0\u1450"+
    "\0\u1491\0\u0186\0\u0186\0\u14d2\0\u0410\0\u1513\0\u1554\0\u1595"+
    "\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d"+
    "\0\u0410\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964"+
    "\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c"+
    "\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2\0\u0410\0\u0410"+
    "\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa"+
    "\0\u1f3b\0\u1f7c\0\u0186\0\u0186\0\u0186\0\u0d75\0\u1fbd\0\u1ffe"+
    "\0\u203f\0\u2080\0\u0186\0\u1040\0\u20c1\0\u0186\0\u2102\0\u2143"+
    "\0\u2184\0\u21c5\0\u0e38\0\u2206\0\u0186\0\u1289\0\u2247\0\u134c"+
    "\0\u138d\0\u13ce\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd"+
    "\0\u240e\0\u244f\0\u2490\0\u0410\0\u24d1\0\u2512\0\u0410\0\u2553"+
    "\0\u0186\0\u2594\0\u25d5\0\u0410\0\u2616\0\u2657\0\u2698\0\u26d9"+
    "\0\u271a\0\u275b\0\u0410\0\u279c\0\u27dd\0\u281e\0\u285f\0\u28a0"+
    "\0\u28e1\0\u2922\0\u2963\0\u29a4\0\u29e5\0\u2a26\0\u2a67\0\u2aa8"+
    "\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0"+
    "\0\u2cf1\0\u2d32\0\u2d73\0\u0410\0\u2db4\0\u2102\0\u2df5\0\u20c1"+
    "\0\u2e36\0\u2e77\0\u2eb8\0\u0186\0\u2ef9\0\u2f3a\0\u2f7b\0\u0410"+
    "\0\u2fbc\0\u2ffd\0\u303e\0\u307f\0\u30c0\0\u0410\0\u0410\0\u3101"+
    "\0\u3142\0\u3183\0\u0410\0\u31c4\0\u3205\0\u3246\0\u3287\0\u32c8"+
    "\0\u3309\0\u334a\0\u0410\0\u338b\0\u33cc\0\u340d\0\u344e\0\u348f"+
    "\0\u34d0\0\u3511\0\u0410\0\u3552\0\u3593\0\u35d4\0\u3615\0\u3656"+
    "\0\u3697\0\u36d8\0\u3719\0\u375a\0\u379b\0\u37dc\0\u0186\0\u381d"+
    "\0\u0186\0\u0410\0\u0410\0\u0410\0\u0410\0\u385e\0\u389f\0\u38e0"+
    "\0\u3921\0\u3962\0\u39a3\0\u39e4\0\u3a25\0\u3a66\0\u0410\0\u3aa7"+
    "\0\u3ae8\0\u3b29\0\u3b6a\0\u0410\0\u3bab\0\u3bec\0\u3c2d\0\u3c6e"+
    "\0\u3caf\0\u3cf0\0\u0410\0\u3d31\0\u3d72\0\u3db3\0\u0410\0\u3df4"+
    "\0\u3e35\0\u3e76\0\u0410\0\u3eb7\0\u0410\0\u3ef8\0\u3f39\0\u3f7a"+
    "\0\u0410\0\u0410\0\u3fbb\0\u3ffc\0\u0410\0\u403d\0\u407e\0\u40bf"+
    "\0\u4100\0\u4141\0\u4182\0\u41c3\0\u4204\0\u0410\0\u4245\0\u0410"+
    "\0\u4286\0\u42c7\0\u0410\0\u4308\0\u4349\0\u438a\0\u0410\0\u0410"+
    "\0\u43cb\0\u0410\0\u440c\0\u444d\0\u448e\0\u0410\0\u44cf\0\u4510"+
    "\0\u4551\0\u0410\0\u4592\0\u45d3\0\u4614\0\u4655\0\u4696\0\u46d7"+
    "\0\u4718\0\u4759\0\u0410\0\u0410\0\u479a\0\u47db\0\u0410\0\u481c"+
    "\0\u485d\0\u489e\0\u0410\0\u48df\0\u0410\0\u4920\0\u0410\0\u4961"+
    "\0\u49a2\0\u49e3\0\u4a24\0\u4a65\0\u4aa6\0\u0410\0\u4ae7\0\u0186"+
    "\0\u4b28\0\u0410\0\u4b69\0\u0410\0\u4baa\0\u4beb\0\u4c2c\0\u4c6d"+
    "\0\u4cae\0\u4cef\0\u0410\0\u4d30\0\u4d71\0\u4db2\0\u4df3\0\u4e34"+
    "\0\u4e75\0\u4eb6\0\u4ef7\0\u4f38\0\u4f79\0\u4fba\0\u4ffb\0\u503c"+
    "\0\u507d\0\u50be\0\u50ff\0\u5140\0\u5181\0\u51c2\0\u5203\0\u0410"+
    "\0\u5244\0\u5285\0\u52c6\0\u5307\0\u5348\0\u5389\0\u53ca\0\u540b"+
    "\0\u0410\0\u544c\0\u548d\0\u54ce\0\u550f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[437];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\7\1\10\17\7\1\10\1\7\2\10\1\7\1\10"+
    "\1\7\5\10\1\7\1\11\1\12\3\13\1\7\23\10"+
    "\27\7\1\14\20\7\1\15\1\16\3\17\35\7\17\20"+
    "\1\7\17\20\1\21\1\22\1\23\2\17\35\20\1\7"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\34\2\36\1\37\1\40\1\41\1\24"+
    "\1\25\1\42\1\25\1\43\1\24\1\25\1\24\2\25"+
    "\1\44\1\25\1\45\1\46\1\47\1\50\3\17\1\51"+
    "\1\25\1\52\1\53\1\25\1\54\1\55\1\25\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\25"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\11\102\1\103\1\104\24\102"+
    "\1\47\1\50\40\102\17\105\1\106\17\105\1\107\1\16"+
    "\3\105\1\110\34\105\102\0\2\10\4\0\1\10\11\0"+
    "\2\10\1\0\12\10\7\0\23\10\51\0\1\12\101\0"+
    "\3\13\75\0\1\16\101\0\3\17\35\0\17\20\1\0"+
    "\17\20\2\0\2\20\1\0\35\20\40\0\1\22\40\0"+
    "\17\20\1\0\17\20\2\0\2\23\1\17\35\20\1\0"+
    "\1\24\1\111\7\112\1\113\3\112\3\0\1\24\1\111"+
    "\1\0\2\111\1\24\1\111\1\24\3\111\2\114\1\115"+
    "\6\0\23\111\10\0\1\112\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\12\25\7\0\23\25\10\0\1\25\1\0"+
    "\1\117\1\25\13\117\3\0\1\117\1\25\1\0\2\25"+
    "\1\117\1\25\1\117\5\25\7\0\23\25\10\0\1\117"+
    "\4\0\1\120\75\0\1\117\1\25\2\117\1\121\7\117"+
    "\1\122\3\0\1\117\1\25\1\0\2\25\1\117\1\25"+
    "\1\117\5\25\7\0\23\25\10\0\1\117\5\0\1\123"+
    "\74\0\1\124\5\0\2\125\10\0\1\124\4\0\1\124"+
    "\1\0\1\124\5\0\1\126\53\0\1\127\1\130\67\0"+
    "\1\117\1\25\2\117\1\34\10\117\3\0\1\117\1\25"+
    "\1\0\2\25\1\117\1\25\1\117\5\25\7\0\23\25"+
    "\10\0\1\117\1\0\1\131\1\132\1\133\1\0\1\134"+
    "\3\0\1\133\1\0\3\133\1\135\2\0\1\131\1\132"+
    "\1\0\2\132\1\131\1\132\1\131\5\132\7\0\23\132"+
    "\10\0\1\133\1\0\1\136\1\137\1\140\1\0\1\141"+
    "\1\142\2\143\1\144\1\143\1\144\2\141\1\145\2\0"+
    "\1\136\1\137\1\0\2\137\1\136\1\137\1\136\5\137"+
    "\7\0\23\137\10\0\1\140\17\146\1\147\1\0\60\146"+
    "\22\0\1\150\1\151\2\152\1\0\1\153\1\0\1\154"+
    "\1\0\1\155\11\0\1\154\1\156\1\157\1\160\1\0"+
    "\1\161\2\0\1\153\12\0\1\162\1\0\1\163\7\0"+
    "\15\25\1\116\2\0\2\25\1\0\11\25\1\164\7\0"+
    "\6\25\1\165\1\166\5\25\1\167\5\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\1\25\1\170"+
    "\10\25\7\0\2\25\1\171\4\25\1\172\13\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\12\25"+
    "\7\0\1\173\2\25\1\174\3\25\1\175\13\25\10\0"+
    "\1\25\1\0\1\176\5\0\2\177\10\0\1\176\4\0"+
    "\1\176\1\0\1\176\5\0\1\200\102\0\1\50\41\0"+
    "\15\25\1\116\2\0\2\25\1\0\12\25\7\0\10\25"+
    "\1\201\10\25\1\202\1\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\1\25\1\203\1\0\12\25\7\0\10\25"+
    "\1\204\4\25\1\205\4\25\1\206\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\2\25\1\0\11\25\1\207\7\0"+
    "\7\25\1\210\11\25\1\211\1\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\2\25\1\0\11\25\1\212\7\0"+
    "\23\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\11\25\1\213\7\0\10\25\1\214\4\25\1\215"+
    "\5\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\12\25\7\0\1\25\1\216\21\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\7\25\1\217"+
    "\2\25\7\0\23\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\15\25\1\220\3\25"+
    "\1\221\1\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\11\25\1\222\7\0\6\25\1\223\1\25"+
    "\1\224\12\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\11\25\1\225\7\0\23\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\12\25\7\0"+
    "\1\25\1\226\1\227\1\230\17\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\1\25\1\231\1\0\7\25\1\232"+
    "\2\25\7\0\7\25\1\233\1\234\12\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\7\25\1\235"+
    "\1\25\1\236\7\0\10\25\1\237\12\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\7\25\1\240"+
    "\2\25\7\0\23\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\3\25\1\241\1\242"+
    "\16\25\10\0\1\25\12\0\1\243\77\0\1\244\106\0"+
    "\1\245\1\0\2\245\2\0\1\245\5\0\1\245\1\0"+
    "\1\245\6\0\1\245\1\0\3\245\31\0\1\112\1\25"+
    "\13\112\3\0\1\112\1\25\1\0\2\25\1\112\1\25"+
    "\1\112\5\25\7\0\23\25\10\0\1\112\1\0\1\112"+
    "\1\111\13\112\3\0\1\112\1\111\1\0\2\111\1\112"+
    "\1\111\1\112\5\111\7\0\23\111\10\0\1\112\1\0"+
    "\1\246\1\111\13\112\3\0\1\246\1\111\1\0\2\111"+
    "\1\246\1\111\1\246\5\111\7\0\23\111\10\0\1\112"+
    "\1\0\1\246\1\25\4\112\2\247\5\112\3\0\1\246"+
    "\1\25\1\0\2\25\1\246\1\25\1\246\5\25\7\0"+
    "\23\25\10\0\1\112\1\0\1\176\5\0\2\177\10\0"+
    "\1\176\4\0\1\176\1\0\1\176\3\0\2\250\44\0"+
    "\1\131\1\132\1\133\1\0\1\251\1\252\1\0\1\253"+
    "\1\254\1\253\1\254\2\251\1\255\2\0\1\131\1\132"+
    "\1\0\2\132\1\131\1\132\1\131\5\132\7\0\23\132"+
    "\10\0\1\133\5\0\1\256\74\0\1\124\10\0\1\257"+
    "\6\0\1\124\4\0\1\124\1\0\1\124\3\0\2\250"+
    "\1\115\43\0\1\260\17\0\1\260\4\0\1\260\1\0"+
    "\1\260\51\0\1\176\5\0\2\177\10\0\1\176\4\0"+
    "\1\176\1\0\1\176\50\0\37\130\2\0\40\130\1\0"+
    "\1\131\1\261\13\131\3\0\1\131\1\261\1\0\2\261"+
    "\1\131\1\261\1\131\5\261\7\0\23\261\10\0\1\131"+
    "\1\0\15\132\3\0\2\132\1\0\12\132\7\0\23\132"+
    "\10\0\1\132\1\0\1\133\1\132\13\133\3\0\1\133"+
    "\1\132\1\0\2\132\1\133\1\132\1\133\5\132\7\0"+
    "\23\132\10\0\1\133\1\0\1\136\1\262\13\136\3\0"+
    "\1\136\1\262\1\0\2\262\1\136\1\262\1\136\5\262"+
    "\7\0\23\262\10\0\1\136\1\0\15\137\1\263\2\0"+
    "\2\137\1\0\12\137\7\0\23\137\10\0\1\137\1\0"+
    "\1\140\1\137\13\140\3\0\1\140\1\137\1\0\2\137"+
    "\1\140\1\137\1\140\5\137\7\0\23\137\10\0\1\140"+
    "\1\0\1\140\1\137\2\140\1\144\10\140\1\263\2\0"+
    "\1\140\1\137\1\0\2\137\1\140\1\137\1\140\5\137"+
    "\7\0\23\137\10\0\1\140\5\0\1\264\10\0\1\263"+
    "\100\0\1\263\63\0\1\140\1\137\13\140\1\263\2\0"+
    "\1\140\1\137\1\0\2\137\1\140\1\137\1\140\5\137"+
    "\7\0\23\137\10\0\1\140\5\0\1\143\113\0\1\265"+
    "\77\0\1\146\1\266\2\146\2\0\1\146\5\0\1\146"+
    "\1\0\1\146\10\0\3\146\65\0\1\267\64\0\1\270"+
    "\4\0\1\270\73\0\1\271\4\0\1\271\1\0\1\271"+
    "\51\0\1\272\17\0\1\272\2\0\3\272\1\0\1\272"+
    "\1\0\4\272\11\0\1\272\10\0\1\272\2\0\1\272"+
    "\71\0\1\273\61\0\1\274\100\0\1\275\44\0\15\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\7\25\1\276"+
    "\4\25\1\277\6\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\10\25\1\300\12\25"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\2\25\1\0"+
    "\12\25\7\0\3\25\1\301\17\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\2\25\1\0\12\25\7\0\10\25"+
    "\1\302\12\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\12\25\7\0\1\25\1\303\21\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\12\25"+
    "\7\0\7\25\1\304\13\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\16\25\1\305"+
    "\1\306\3\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\12\25\7\0\13\25\1\307\7\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\12\25"+
    "\7\0\4\25\1\310\16\25\10\0\1\25\1\0\1\176"+
    "\17\0\1\176\4\0\1\176\1\0\1\176\3\0\2\250"+
    "\44\0\1\176\17\0\1\176\4\0\1\176\1\0\1\176"+
    "\106\0\1\311\43\0\15\25\1\116\2\0\2\25\1\0"+
    "\11\25\1\312\7\0\23\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\10\25\1\313"+
    "\12\25\10\0\1\25\1\0\15\25\1\116\2\0\1\25"+
    "\1\314\1\0\12\25\7\0\23\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\2\25\1\0\12\25\7\0\3\25"+
    "\1\315\17\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\12\25\7\0\3\25\1\316\17\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\12\25"+
    "\7\0\7\25\1\317\13\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\10\25\1\320"+
    "\12\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\7\25\1\321\2\25\7\0\23\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\12\25\7\0"+
    "\6\25\1\322\14\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\1\25\1\323\21\25"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\2\25\1\0"+
    "\12\25\7\0\16\25\1\324\4\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\2\25\1\0\1\25\1\325\10\25"+
    "\7\0\23\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\12\25\7\0\21\25\1\326\1\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\1\25\1\327\1\0"+
    "\12\25\7\0\23\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\1\25\1\330\21\25"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\2\25\1\0"+
    "\11\25\1\331\7\0\15\25\1\332\5\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\12\25\7\0"+
    "\2\25\1\333\20\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\3\25\1\334\17\25"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\2\25\1\0"+
    "\12\25\7\0\20\25\1\335\2\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\2\25\1\0\12\25\7\0\3\25"+
    "\1\336\17\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\11\25\1\337\7\0\23\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\11\25\1\340"+
    "\7\0\23\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\12\25\7\0\4\25\1\341\16\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\7\25"+
    "\1\342\1\25\1\343\7\0\23\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\2\25\1\0\12\25\7\0\3\25"+
    "\1\344\13\25\1\345\3\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\16\25\1\346"+
    "\4\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\12\25\7\0\1\25\1\347\21\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\12\25\7\0"+
    "\13\25\1\350\7\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\3\25\1\351\17\25"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\2\25\1\0"+
    "\12\25\7\0\1\25\1\352\5\25\1\353\13\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\11\25"+
    "\1\354\7\0\15\25\1\355\5\25\10\0\1\25\1\0"+
    "\1\246\1\111\4\112\2\113\5\112\3\0\1\246\1\111"+
    "\1\0\2\111\1\246\1\111\1\246\5\111\7\0\23\111"+
    "\10\0\1\112\1\0\1\356\5\0\2\357\10\0\1\356"+
    "\4\0\1\356\1\0\1\356\51\0\1\133\1\132\2\133"+
    "\1\254\10\133\3\0\1\133\1\132\1\0\2\132\1\133"+
    "\1\132\1\133\5\132\7\0\23\132\10\0\1\133\5\0"+
    "\1\360\100\0\1\253\74\0\1\356\17\0\1\356\4\0"+
    "\1\356\1\0\1\356\51\0\1\260\17\0\1\260\4\0"+
    "\1\260\1\0\1\260\3\0\2\250\1\115\43\0\1\131"+
    "\1\132\13\131\3\0\1\131\1\132\1\0\2\132\1\131"+
    "\1\132\1\131\5\132\7\0\23\132\10\0\1\131\1\0"+
    "\1\136\1\137\13\136\3\0\1\136\1\137\1\0\2\137"+
    "\1\136\1\137\1\136\5\137\7\0\23\137\10\0\1\136"+
    "\5\0\1\143\10\0\1\263\133\0\1\361\103\0\1\362"+
    "\71\0\1\363\106\0\1\364\26\0\15\25\1\116\2\0"+
    "\2\25\1\0\12\25\7\0\10\25\1\365\12\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\12\25"+
    "\7\0\15\25\1\366\5\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\16\25\1\367"+
    "\4\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\12\25\7\0\13\25\1\370\7\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\12\25\7\0"+
    "\11\25\1\371\11\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\11\25\1\372\7\0\23\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\11\25"+
    "\1\373\7\0\23\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\10\25\1\374\12\25"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\2\25\1\0"+
    "\11\25\1\375\7\0\23\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\3\25\1\376"+
    "\17\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\12\25\7\0\20\25\1\377\2\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\7\25\1\u0100"+
    "\2\25\7\0\23\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\16\25\1\u0101\4\25"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\2\25\1\0"+
    "\11\25\1\u0102\7\0\23\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\1\25\1\u0103"+
    "\21\25\10\0\1\25\1\0\15\25\1\116\2\0\1\25"+
    "\1\u0104\1\0\12\25\7\0\23\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\2\25\1\0\11\25\1\u0105\7\0"+
    "\23\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\7\25\1\u0106\2\25\7\0\23\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\1\25\1\u0107\1\0\12\25"+
    "\7\0\23\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\11\25\1\u0108\7\0\23\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\12\25\7\0"+
    "\15\25\1\u0109\5\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\21\25\1\u010a\1\25"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\2\25\1\0"+
    "\12\25\7\0\3\25\1\u010b\17\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\2\25\1\0\12\25\7\0\7\25"+
    "\1\u010c\13\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\12\25\7\0\15\25\1\u010d\5\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\7\25"+
    "\1\u010e\2\25\7\0\23\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\2\25\1\0\7\25\1\u010f\2\25\7\0"+
    "\23\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\11\25\1\u0110\7\0\23\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\1\25\1\u0111\1\0\12\25\7\0"+
    "\23\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\7\25\1\u0112\2\25\7\0\23\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\11\25\1\u0113"+
    "\7\0\23\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\12\25\7\0\4\25\1\u0114\16\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\7\25"+
    "\1\u0115\2\25\7\0\23\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\4\25\1\u0116"+
    "\16\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\12\25\7\0\6\25\1\u0117\14\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\1\25\1\u0118\1\0\12\25"+
    "\7\0\23\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\12\25\7\0\21\25\1\u0119\1\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\12\25"+
    "\7\0\22\25\1\u011a\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\13\25\1\u011b\7\25"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\2\25\1\0"+
    "\12\25\7\0\15\25\1\u011c\5\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\2\25\1\0\11\25\1\u011d\7\0"+
    "\23\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\12\25\7\0\3\25\1\u011e\17\25\10\0\1\25"+
    "\1\0\1\356\5\0\2\257\10\0\1\356\4\0\1\356"+
    "\1\0\1\356\116\0\1\u011f\41\0\1\u0120\137\0\1\u0121"+
    "\33\0\15\25\1\116\2\0\2\25\1\0\12\25\7\0"+
    "\12\25\1\u0122\10\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\3\25\1\u0123\17\25"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\2\25\1\0"+
    "\12\25\7\0\5\25\1\u0124\15\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\2\25\1\0\11\25\1\u0125\7\0"+
    "\23\25\10\0\1\25\1\0\15\25\1\116\2\0\1\25"+
    "\1\u0126\1\0\12\25\7\0\23\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\2\25\1\0\12\25\7\0\17\25"+
    "\1\u0127\3\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\1\25\1\u0128\1\0\12\25\7\0\23\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\12\25\7\0"+
    "\15\25\1\u0129\5\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\7\25\1\u012a\13\25"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\2\25\1\0"+
    "\12\25\7\0\1\25\1\u012b\21\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\2\25\1\0\12\25\7\0\16\25"+
    "\1\u012c\4\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\11\25\1\u012d\7\0\23\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\12\25\7\0"+
    "\13\25\1\u012e\7\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\7\25\1\u012f\13\25"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\2\25\1\0"+
    "\7\25\1\u0130\2\25\7\0\23\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\1\25\1\u0131\1\0\12\25\7\0"+
    "\23\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\7\25\1\u0132\2\25\7\0\23\25\10\0\1\25"+
    "\1\0\6\25\1\u0133\6\25\1\116\2\0\2\25\1\0"+
    "\12\25\7\0\23\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\11\25\1\u0134\7\0\23\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\12\25"+
    "\7\0\3\25\1\u0135\17\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\20\25\1\u0136"+
    "\2\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\12\25\7\0\15\25\1\u0137\5\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\1\25\1\u0138\1\0\12\25"+
    "\7\0\23\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\7\25\1\u0139\2\25\7\0\23\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\12\25"+
    "\7\0\1\25\1\u013a\21\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\4\25\1\u013b"+
    "\16\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\12\25\7\0\3\25\1\u013c\17\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\12\25\7\0"+
    "\1\25\1\u013d\21\25\10\0\1\25\1\0\6\25\1\u013e"+
    "\6\25\1\116\2\0\2\25\1\0\12\25\7\0\23\25"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\2\25\1\0"+
    "\12\25\7\0\10\25\1\u013f\12\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\2\25\1\0\12\25\7\0\10\25"+
    "\1\u0140\12\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\12\25\7\0\7\25\1\u0141\13\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\12\25"+
    "\7\0\7\25\1\u0142\13\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\7\25\1\u0143"+
    "\13\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\12\25\7\0\4\25\1\u0144\16\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\12\25\7\0"+
    "\14\25\1\u0145\6\25\10\0\1\25\52\0\1\u0146\27\0"+
    "\15\25\1\116\2\0\2\25\1\0\12\25\7\0\12\25"+
    "\1\u0147\10\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\12\25\7\0\1\25\1\u0148\21\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\12\25"+
    "\7\0\1\25\1\u0149\21\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\2\25\1\u014a"+
    "\20\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\12\25\7\0\7\25\1\u014b\13\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\12\25\7\0"+
    "\15\25\1\u014c\5\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\1\25\1\u014d\21\25"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\2\25\1\0"+
    "\12\25\7\0\13\25\1\u014e\7\25\10\0\1\25\1\0"+
    "\6\25\1\u014f\6\25\1\116\2\0\2\25\1\0\12\25"+
    "\7\0\23\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\1\25\1\u0150\1\0\12\25\7\0\23\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\12\25\7\0"+
    "\12\25\1\u0151\10\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\1\25\1\u0152\10\25\7\0\23\25"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\2\25\1\0"+
    "\12\25\7\0\4\25\1\u0153\2\25\1\u0154\1\u0155\12\25"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\2\25\1\0"+
    "\11\25\1\u0156\7\0\23\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\15\25\1\u0157"+
    "\5\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\12\25\7\0\3\25\1\u0158\17\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\12\25\7\0"+
    "\15\25\1\u0159\5\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\1\25\1\u015a\21\25"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\2\25\1\0"+
    "\11\25\1\u015b\7\0\23\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\22\25\1\u015c"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\2\25\1\0"+
    "\7\25\1\u015d\2\25\7\0\23\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\2\25\1\0\12\25\7\0\13\25"+
    "\1\u015e\7\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\12\25\7\0\13\25\1\u015f\7\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\11\25"+
    "\1\u0160\7\0\23\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\11\25\1\u0161\7\0\23\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\12\25"+
    "\7\0\4\25\1\u0162\16\25\10\0\1\25\35\0\1\u0163"+
    "\44\0\15\25\1\116\2\0\2\25\1\0\7\25\1\u0164"+
    "\2\25\7\0\23\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\15\25\1\u0165\5\25"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\2\25\1\0"+
    "\12\25\7\0\6\25\1\u0166\14\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\2\25\1\0\12\25\7\0\10\25"+
    "\1\u0167\12\25\10\0\1\25\1\0\6\25\1\u0168\6\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\23\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\1\25"+
    "\1\u0169\10\25\7\0\23\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\6\25\1\u016a"+
    "\14\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\12\25\7\0\15\25\1\u016b\5\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\12\25\7\0"+
    "\7\25\1\u016c\13\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\1\25\1\u016d\6\25"+
    "\1\u016e\12\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\12\25\7\0\10\25\1\u016f\12\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\12\25"+
    "\7\0\17\25\1\u0170\2\25\1\u0171\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\2\25\1\0\12\25\7\0\16\25"+
    "\1\u0172\4\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\12\25\7\0\16\25\1\u0173\4\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\11\25"+
    "\1\370\7\0\23\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\17\25\1\u0174\3\25"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\2\25\1\0"+
    "\12\25\7\0\3\25\1\u0175\17\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\2\25\1\0\12\25\7\0\10\25"+
    "\1\u0176\12\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\1\25\1\u0177\1\0\12\25\7\0\23\25\10\0\1\25"+
    "\53\0\1\u0178\26\0\15\25\1\116\2\0\1\25\1\u0179"+
    "\1\0\12\25\7\0\23\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\10\25\1\u017a"+
    "\12\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\12\25\7\0\3\25\1\u017b\17\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\12\25\7\0"+
    "\4\25\1\u017c\16\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\6\25\1\u017d\14\25"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\2\25\1\0"+
    "\12\25\7\0\4\25\1\u017e\16\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\2\25\1\0\11\25\1\u017f\7\0"+
    "\23\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\12\25\7\0\10\25\1\u0180\12\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\12\25\7\0"+
    "\16\25\1\u0181\4\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\16\25\1\u0182\4\25"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\2\25\1\0"+
    "\11\25\1\u0183\7\0\23\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\1\25\1\u0184"+
    "\21\25\10\0\1\25\1\0\6\25\1\u0185\6\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\23\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\12\25\7\0"+
    "\1\25\1\u0186\21\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\12\25\1\u0187\10\25"+
    "\10\0\1\25\51\0\1\u0188\30\0\15\25\1\116\2\0"+
    "\2\25\1\0\12\25\7\0\13\25\1\u0189\7\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\12\25"+
    "\7\0\3\25\1\u018a\17\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\6\25\1\u018b"+
    "\14\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\11\25\1\u018c\7\0\23\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\1\25\1\u018d\1\0\12\25\7\0"+
    "\23\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\12\25\7\0\5\25\1\u018e\15\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\12\25\7\0"+
    "\5\25\1\370\15\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\3\25\1\u018f\17\25"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\2\25\1\0"+
    "\12\25\7\0\17\25\1\u0190\3\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\2\25\1\0\1\25\1\u0191\10\25"+
    "\7\0\23\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\12\25\7\0\3\25\1\u0192\17\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\12\25"+
    "\7\0\4\25\1\u0193\16\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\20\25\1\u0194"+
    "\2\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\7\25\1\u0195\2\25\7\0\23\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\11\25\1\u0196"+
    "\7\0\23\25\10\0\1\25\1\0\6\25\1\u0197\6\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\23\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\12\25"+
    "\7\0\22\25\1\u0198\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\15\25\1\167\5\25"+
    "\10\0\1\25\1\0\6\25\1\u0199\6\25\1\116\2\0"+
    "\2\25\1\0\12\25\7\0\23\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\2\25\1\0\1\25\1\u019a\10\25"+
    "\7\0\23\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\12\25\7\0\14\25\1\u015a\6\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\12\25"+
    "\7\0\1\25\1\u019b\21\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\2\25\1\u019c"+
    "\20\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\12\25\7\0\1\25\1\u019d\21\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\12\25\7\0"+
    "\20\25\1\u019e\2\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\10\25\1\u019f\12\25"+
    "\10\0\1\25\1\0\6\25\1\u01a0\6\25\1\116\2\0"+
    "\2\25\1\0\12\25\7\0\23\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\2\25\1\0\12\25\7\0\15\25"+
    "\1\u01a1\5\25\10\0\1\25\1\0\6\25\1\u01a2\6\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\23\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\11\25"+
    "\1\u01a3\7\0\23\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\7\25\1\u01a4\13\25"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\2\25\1\0"+
    "\12\25\7\0\1\25\1\u01a5\21\25\10\0\1\25\1\0"+
    "\15\25\1\116\2\0\2\25\1\0\12\25\7\0\7\25"+
    "\1\u015a\13\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\12\25\7\0\1\25\1\u01a6\21\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\12\25"+
    "\7\0\1\25\1\u01a7\21\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\4\25\1\u01a8"+
    "\16\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\12\25\7\0\21\25\1\u01a9\1\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\12\25\7\0"+
    "\10\25\1\u01aa\12\25\10\0\1\25\1\0\15\25\1\116"+
    "\2\0\2\25\1\0\12\25\7\0\21\25\1\u01ab\1\25"+
    "\10\0\1\25\1\0\15\25\1\116\2\0\1\25\1\u01ac"+
    "\1\0\12\25\7\0\23\25\10\0\1\25\1\0\6\25"+
    "\1\u01ad\6\25\1\116\2\0\2\25\1\0\12\25\7\0"+
    "\23\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\12\25\7\0\10\25\1\u01ae\12\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\2\25\1\0\11\25\1\u01af"+
    "\7\0\23\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\12\25\7\0\4\25\1\u01b0\16\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\12\25"+
    "\7\0\13\25\1\u01b1\7\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\2\25\1\0\7\25\1\301\2\25\7\0"+
    "\23\25\10\0\1\25\1\0\15\25\1\116\2\0\2\25"+
    "\1\0\12\25\7\0\1\25\1\u01b2\21\25\10\0\1\25"+
    "\1\0\15\25\1\116\2\0\1\25\1\u01b3\1\0\12\25"+
    "\7\0\23\25\10\0\1\25\1\0\15\25\1\116\2\0"+
    "\2\25\1\0\12\25\7\0\15\25\1\u01b4\5\25\10\0"+
    "\1\25\1\0\15\25\1\116\2\0\2\25\1\0\12\25"+
    "\7\0\3\25\1\u01b5\17\25\10\0\1\25\1\0\15\25"+
    "\1\116\2\0\2\25\1\0\12\25\7\0\14\25\1\370"+
    "\6\25\10\0\1\25";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21840];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\3\1\1\11\25\1\2\11\17\1\10\11\1\1\1\11"+
    "\2\1\1\11\2\1\1\11\4\0\2\1\1\0\1\11"+
    "\4\1\2\0\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\0\1\1\1\0\4\1\4\0\1\11\4\0"+
    "\2\11\2\0\2\11\13\1\2\0\42\1\3\11\1\1"+
    "\2\0\1\1\1\0\1\11\1\1\1\0\1\11\5\0"+
    "\1\1\1\11\1\1\1\0\3\1\3\0\13\1\1\11"+
    "\45\1\1\0\1\1\3\0\1\11\52\1\1\11\1\0"+
    "\1\11\44\1\1\0\34\1\1\0\24\1\1\0\17\1"+
    "\1\11\55\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[437];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    int commentLevel = 0;


  _DylanLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _DylanLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 26: 
          { return DylanTypes.RBRACE;
          }
        case 105: break;
        case 84: 
          { return DylanTypes.DEFINE;
          }
        case 106: break;
        case 24: 
          { return DylanTypes.RBRACKET;
          }
        case 107: break;
        case 25: 
          { return DylanTypes.LBRACE;
          }
        case 108: break;
        case 45: 
          { return DylanTypes.HASH_PAREN;
          }
        case 109: break;
        case 83: 
          { return DylanTypes.SELECT;
          }
        case 110: break;
        case 60: 
          { return DylanTypes.USE;
          }
        case 111: break;
        case 96: 
          { return DylanTypes.KEYED_BY;
          }
        case 112: break;
        case 104: 
          { return DylanTypes.COPY_DOWN_METHOD;
          }
        case 113: break;
        case 86: 
          { return DylanTypes.CREATE;
          }
        case 114: break;
        case 20: 
          { yybegin(STRING); return DylanTypes.STRING_CHARACTER;
          }
        case 115: break;
        case 46: 
          { return DylanTypes.HASH_BRACKET;
          }
        case 116: break;
        case 6: 
          { yybegin(DYLAN_CODE); return DylanTypes.CRLF;
          }
        case 117: break;
        case 62: 
          { return DylanTypes.NONDEFINING_BEGIN_WORD;
          }
        case 118: break;
        case 29: 
          { return DylanTypes.VARIABLE_IGNORE;
          }
        case 119: break;
        case 49: 
          { return DylanTypes.IF;
          }
        case 120: break;
        case 65: 
          { return DylanTypes.FROM;
          }
        case 121: break;
        case 101: 
          { return DylanTypes.OTHERWISE;
          }
        case 122: break;
        case 70: 
          { return DylanTypes.HASH_NEXT;
          }
        case 123: break;
        case 2: 
          { yybegin(WAITING_SEPARATOR); return DylanTypes.KEY;
          }
        case 124: break;
        case 79: 
          { return DylanTypes.UNTIL;
          }
        case 125: break;
        case 54: 
          { return DylanTypes.CHARACTER_LITERAL;
          }
        case 126: break;
        case 22: 
          { return DylanTypes.RPAREN;
          }
        case 127: break;
        case 23: 
          { return DylanTypes.LBRACKET;
          }
        case 128: break;
        case 40: 
          { return DylanTypes.ESCAPED_WORD;
          }
        case 129: break;
        case 30: 
          { return DylanTypes.COMMENT;
          }
        case 130: break;
        case 31: 
          { return DylanTypes.STRING_CHARACTER;
          }
        case 131: break;
        case 72: 
          { return DylanTypes.BEGIN;
          }
        case 132: break;
        case 47: 
          { return DylanTypes.BY;
          }
        case 133: break;
        case 100: 
          { return DylanTypes.EXCEPTION;
          }
        case 134: break;
        case 18: 
          { return DylanTypes.DOT;
          }
        case 135: break;
        case 4: 
          { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
          }
        case 136: break;
        case 42: 
          { return DylanTypes.HASH_HASH;
          }
        case 137: break;
        case 43: 
          { return DylanTypes.HASH_T;
          }
        case 138: break;
        case 7: 
          { return TokenType.WHITE_SPACE;
          }
        case 139: break;
        case 48: 
          { return DylanTypes.TO;
          }
        case 140: break;
        case 63: 
          { return DylanTypes.ELSE;
          }
        case 141: break;
        case 38: 
          { return DylanTypes.CONSTRAINED_NAME;
          }
        case 142: break;
        case 39: 
          { return DylanTypes.COLON_COLON;
          }
        case 143: break;
        case 21: 
          { return DylanTypes.LPAREN;
          }
        case 144: break;
        case 8: 
          { return DylanTypes.VALUE;
          }
        case 145: break;
        case 53: 
          { return DylanTypes.STRING_ESCAPE_CHARACTER;
          }
        case 146: break;
        case 64: 
          { return DylanTypes.THEN;
          }
        case 147: break;
        case 51: 
          { commentLevel--; if (commentLevel == 0) { yybegin(DYLAN_CODE);} return DylanTypes.COMMENT;
          }
        case 148: break;
        case 66: 
          { return DylanTypes.SLOT;
          }
        case 149: break;
        case 76: 
          { return DylanTypes.WHILE;
          }
        case 150: break;
        case 13: 
          { return DylanTypes.EQUAL;
          }
        case 151: break;
        case 93: 
          { return DylanTypes.CLEANUP;
          }
        case 152: break;
        case 75: 
          { return DylanTypes.LOCAL;
          }
        case 153: break;
        case 33: 
          { return DylanTypes.KEYWORD;
          }
        case 154: break;
        case 94: 
          { return DylanTypes.HANDLER_T;
          }
        case 155: break;
        case 82: 
          { return DylanTypes.ELSEIF;
          }
        case 156: break;
        case 68: 
          { return DylanTypes.CASE;
          }
        case 157: break;
        case 10: 
          { return DylanTypes.NUMBER;
          }
        case 158: break;
        case 97: 
          { return DylanTypes.VARIABLE_T;
          }
        case 159: break;
        case 12: 
          { return DylanTypes.QUERY;
          }
        case 160: break;
        case 5: 
          { yybegin(WAITING_VALUE); return DylanTypes.HEADER_SEPARATOR;
          }
        case 161: break;
        case 90: 
          { return DylanTypes.FINALLY;
          }
        case 162: break;
        case 69: 
          { return DylanTypes.HASH_REST;
          }
        case 163: break;
        case 11: 
          { return DylanTypes.NONDEFINING_NONEXPRESSION_WORD;
          }
        case 164: break;
        case 44: 
          { return DylanTypes.HASH_F;
          }
        case 165: break;
        case 81: 
          { return DylanTypes.EXPORT;
          }
        case 166: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 167: break;
        case 102: 
          { return DylanTypes.AFTERWARDS;
          }
        case 168: break;
        case 61: 
          { return DylanTypes.HASH_KEY;
          }
        case 169: break;
        case 55: 
          { return DylanTypes.ALL;
          }
        case 170: break;
        case 9: 
          { yybegin(YYINITIAL); return DylanTypes.CRLF;
          }
        case 171: break;
        case 80: 
          { return DylanTypes.USING;
          }
        case 172: break;
        case 37: 
          { yybegin(COMMENT_BLOCK); commentLevel++; return DylanTypes.COMMENT;
          }
        case 173: break;
        case 78: 
          { return DylanTypes.MACRO_T;
          }
        case 174: break;
        case 58: 
          { return DylanTypes.FOR;
          }
        case 175: break;
        case 27: 
          { return DylanTypes.COMMA;
          }
        case 176: break;
        case 57: 
          { return DylanTypes.ELLIPSIS;
          }
        case 177: break;
        case 36: 
          { return DylanTypes.EQUAL_ARROW;
          }
        case 178: break;
        case 95: 
          { return DylanTypes.FUNCTION;
          }
        case 179: break;
        case 19: 
          { /* return DylanTypes.CRLF; */
          }
        case 180: break;
        case 98: 
          { return DylanTypes.CONSTANT_T;
          }
        case 181: break;
        case 89: 
          { return DylanTypes.UNLESS;
          }
        case 182: break;
        case 71: 
          { return DylanTypes.BELOW;
          }
        case 183: break;
        case 15: 
          { return DylanTypes.UNARY_AND_BINARY_OPERATOR;
          }
        case 184: break;
        case 85: 
          { return DylanTypes.DOMAIN;
          }
        case 185: break;
        case 28: 
          { return DylanTypes.SEMICOLON;
          }
        case 186: break;
        case 52: 
          { commentLevel++; yybegin(COMMENT_BLOCK); return DylanTypes.COMMENT;
          }
        case 187: break;
        case 103: 
          { return DylanTypes.SHARED_SYMBOLS_T;
          }
        case 188: break;
        case 91: 
          { return DylanTypes.LIBRARY;
          }
        case 189: break;
        case 35: 
          { return DylanTypes.EQUAL_EQUAL;
          }
        case 190: break;
        case 77: 
          { return DylanTypes.CLASS;
          }
        case 191: break;
        case 59: 
          { return DylanTypes.LET;
          }
        case 192: break;
        case 16: 
          { return DylanTypes.BINARY_OPERATOR_ONLY;
          }
        case 193: break;
        case 92: 
          { return DylanTypes.GENERIC;
          }
        case 194: break;
        case 88: 
          { return DylanTypes.MODULE;
          }
        case 195: break;
        case 73: 
          { return DylanTypes.BLOCK;
          }
        case 196: break;
        case 67: 
          { return DylanTypes.WHEN;
          }
        case 197: break;
        case 50: 
          { return DylanTypes.IN;
          }
        case 198: break;
        case 32: 
          { yybegin(DYLAN_CODE); return DylanTypes.STRING_CHARACTER;
          }
        case 199: break;
        case 14: 
          { return DylanTypes.UNARY_OPERATOR_ONLY;
          }
        case 200: break;
        case 34: 
          { return DylanTypes.QUERY_QUERY;
          }
        case 201: break;
        case 74: 
          { return DylanTypes.ABOVE;
          }
        case 202: break;
        case 3: 
          { yybegin(DYLAN_CODE); return TokenType.WHITE_SPACE;
          }
        case 203: break;
        case 56: 
          { return DylanTypes.END;
          }
        case 204: break;
        case 87: 
          { return DylanTypes.METHOD;
          }
        case 205: break;
        case 99: 
          { return DylanTypes.HASH_ALL_KEYS;
          }
        case 206: break;
        case 41: 
          { return DylanTypes.OPERATOR_NAME;
          }
        case 207: break;
        case 17: 
          { return DylanTypes.HASH;
          }
        case 208: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
