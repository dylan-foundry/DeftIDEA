/* The following code was generated by JFlex 1.4.3 on 10/11/13 8:04 PM */

package org.dylanfoundry.deft.filetypes.dylan;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.dylanfoundry.deft.filetypes.dylan.psi.DylanTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/11/13 8:04 PM from the specification file
 * <tt>/Users/dvoss/Documents/Projects/DeftIDEA/DeftIDEA/src/org/dylanfoundry/deft/filetypes/dylan/Dylan.flex</tt>
 */
class _DylanLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int WAITING_VALUE = 2;
  public static final int STRING = 8;
  public static final int YYINITIAL = 0;
  public static final int DYLAN_CODE = 4;
  public static final int COMMENT_BLOCK = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\41\1\40\1\0\1\43\1\37\22\0\1\42\1\3\1\44"+
    "\1\23\2\3\1\13\1\20\1\70\1\71\1\11\1\10\1\76\1\7"+
    "\1\36\1\12\1\21\1\26\6\30\2\1\1\16\1\77\1\14\1\5"+
    "\1\15\1\4\1\3\1\32\1\24\2\32\1\34\1\32\10\2\1\27"+
    "\10\2\1\31\2\2\1\72\1\17\1\73\1\13\1\100\1\0\1\33"+
    "\1\25\1\63\1\60\1\35\1\47\1\61\1\66\1\62\1\2\1\52"+
    "\1\54\1\65\1\50\1\55\1\64\1\2\1\22\1\51\1\46\1\67"+
    "\1\56\1\57\1\45\1\53\1\2\1\74\1\13\1\75\1\6\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\1\1\3\2\4\1\5\1\6"+
    "\2\7\2\10\1\11\1\12\1\1\1\13\1\14\1\15"+
    "\1\16\4\17\3\1\1\20\3\12\1\21\2\22\1\23"+
    "\17\12\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\3\35\3\36\1\37\1\40\1\35\3\41"+
    "\4\0\1\11\1\42\1\0\1\43\1\44\1\45\1\17"+
    "\1\11\2\0\1\46\1\0\1\47\1\0\1\17\1\50"+
    "\1\0\1\51\1\0\4\52\4\0\1\53\4\0\1\54"+
    "\1\55\2\0\1\56\1\57\1\12\1\60\7\12\1\11"+
    "\2\0\1\61\22\12\1\62\1\63\12\12\1\64\1\65"+
    "\1\66\1\11\2\0\1\47\1\0\2\47\1\0\1\17"+
    "\5\0\1\52\2\67\1\0\3\11\3\0\5\12\1\70"+
    "\2\12\1\71\1\12\1\72\2\12\1\73\6\12\1\74"+
    "\25\12\1\75\1\12\1\11\1\0\1\47\3\0\1\76"+
    "\7\12\1\77\1\100\1\101\3\12\1\102\6\12\1\103"+
    "\5\12\1\104\13\12\1\105\1\0\1\106\1\107\1\110"+
    "\1\111\1\112\11\12\1\113\3\12\1\114\4\12\1\115"+
    "\3\12\1\116\3\12\1\117\1\12\1\120\1\0\2\12"+
    "\1\121\1\122\2\12\1\123\5\12\1\124\1\125\1\12"+
    "\1\126\3\12\1\127\1\130\1\12\1\131\1\0\2\12"+
    "\1\132\3\12\1\133\2\12\1\134\1\135\2\12\1\136"+
    "\1\0\2\12\1\137\1\12\1\140\1\12\1\141\1\142"+
    "\1\12\1\143\1\12\1\144\1\12\1\145\1\12\1\146"+
    "\10\12\1\147\2\12\1\150";

  private static int [] zzUnpackAction() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0145\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u0145\0\u034d"+
    "\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555"+
    "\0\u0555\0\u0451\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db"+
    "\0\u071c\0\u075d\0\u079e\0\u07df\0\u0820\0\u0145\0\u0145\0\u0861"+
    "\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0a69"+
    "\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0145\0\u0145"+
    "\0\u0145\0\u0145\0\u0145\0\u0145\0\u0145\0\u0145\0\u0451\0\u0145"+
    "\0\u0c30\0\u0c71\0\u0145\0\u0cb2\0\u0cf3\0\u0145\0\u0145\0\u0d34"+
    "\0\u0d75\0\u0249\0\u0145\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u0eba"+
    "\0\u0efb\0\u0451\0\u0145\0\u0451\0\u0451\0\u0f3c\0\u0f7d\0\u0fbe"+
    "\0\u0fff\0\u0145\0\u1040\0\u1081\0\u10c2\0\u10c2\0\u0145\0\u1103"+
    "\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b"+
    "\0\u134c\0\u138d\0\u0145\0\u13ce\0\u140f\0\u1450\0\u1491\0\u0145"+
    "\0\u0145\0\u14d2\0\u1513\0\u0145\0\u0145\0\u1554\0\u0410\0\u1595"+
    "\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d"+
    "\0\u17de\0\u0410\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964"+
    "\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c"+
    "\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u0410\0\u0410\0\u1cb1\0\u1cf2"+
    "\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa"+
    "\0\u0145\0\u0145\0\u0145\0\u0e38\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe"+
    "\0\u0145\0\u10c2\0\u203f\0\u0145\0\u2080\0\u20c1\0\u2102\0\u2143"+
    "\0\u0efb\0\u2184\0\u0145\0\u130b\0\u21c5\0\u13ce\0\u140f\0\u1450"+
    "\0\u2206\0\u2247\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd"+
    "\0\u0410\0\u240e\0\u244f\0\u0410\0\u2490\0\u0145\0\u24d1\0\u2512"+
    "\0\u0410\0\u2553\0\u2594\0\u25d5\0\u2616\0\u2657\0\u2698\0\u0410"+
    "\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd\0\u281e\0\u285f\0\u28a0"+
    "\0\u28e1\0\u2922\0\u2963\0\u29a4\0\u29e5\0\u2a26\0\u2a67\0\u2aa8"+
    "\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed\0\u0410\0\u2c2e\0\u2080"+
    "\0\u2c6f\0\u203f\0\u2cb0\0\u2cf1\0\u2d32\0\u0145\0\u2d73\0\u2db4"+
    "\0\u2df5\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a\0\u0410\0\u0410"+
    "\0\u2f7b\0\u2fbc\0\u2ffd\0\u0410\0\u303e\0\u307f\0\u30c0\0\u3101"+
    "\0\u3142\0\u3183\0\u0410\0\u31c4\0\u3205\0\u3246\0\u3287\0\u32c8"+
    "\0\u0410\0\u3309\0\u334a\0\u338b\0\u33cc\0\u340d\0\u344e\0\u348f"+
    "\0\u34d0\0\u3511\0\u3552\0\u3593\0\u0145\0\u35d4\0\u0145\0\u0410"+
    "\0\u0410\0\u0410\0\u0410\0\u3615\0\u3656\0\u3697\0\u36d8\0\u3719"+
    "\0\u375a\0\u379b\0\u37dc\0\u381d\0\u0410\0\u385e\0\u389f\0\u38e0"+
    "\0\u0410\0\u3921\0\u3962\0\u39a3\0\u39e4\0\u0410\0\u3a25\0\u3a66"+
    "\0\u3aa7\0\u0410\0\u3ae8\0\u3b29\0\u3b6a\0\u0410\0\u3bab\0\u0410"+
    "\0\u3bec\0\u3c2d\0\u3c6e\0\u0410\0\u0410\0\u3caf\0\u3cf0\0\u0410"+
    "\0\u3d31\0\u3d72\0\u3db3\0\u3df4\0\u3e35\0\u0410\0\u0410\0\u3e76"+
    "\0\u0410\0\u3eb7\0\u3ef8\0\u3f39\0\u0410\0\u0410\0\u3f7a\0\u0410"+
    "\0\u3fbb\0\u3ffc\0\u403d\0\u0410\0\u407e\0\u40bf\0\u4100\0\u0410"+
    "\0\u4141\0\u4182\0\u0410\0\u0410\0\u41c3\0\u4204\0\u0410\0\u4245"+
    "\0\u4286\0\u42c7\0\u0410\0\u4308\0\u0410\0\u4349\0\u0410\0\u0410"+
    "\0\u438a\0\u0145\0\u43cb\0\u0410\0\u440c\0\u0410\0\u444d\0\u0410"+
    "\0\u448e\0\u44cf\0\u4510\0\u4551\0\u4592\0\u45d3\0\u4614\0\u4655"+
    "\0\u0410\0\u4696\0\u46d7\0\u0410";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\6\1\7\7\6\1\10\3\6\1\11\3\6\1\7"+
    "\1\6\2\7\1\6\1\7\1\6\5\7\1\6\1\12"+
    "\1\13\3\14\1\6\23\7\11\6\17\15\1\6\17\15"+
    "\1\16\1\17\1\20\2\21\35\15\1\6\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\32\2\34\1\35\1\36\1\37\1\22\1\23\1\40"+
    "\1\23\1\41\1\22\1\23\1\22\2\23\1\42\1\23"+
    "\1\43\1\44\1\45\1\46\3\21\1\47\1\23\1\50"+
    "\1\51\1\23\1\52\1\53\1\23\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\23\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\11\100\1\101\1\102\24\100\1\45\1\46"+
    "\40\100\17\103\1\104\17\103\1\105\1\106\3\103\1\107"+
    "\34\103\102\0\2\7\4\0\1\7\11\0\2\7\1\0"+
    "\12\7\7\0\23\7\23\0\1\110\125\0\1\111\1\112"+
    "\77\0\1\111\1\113\101\0\3\14\35\0\17\15\1\0"+
    "\17\15\2\0\2\15\1\0\35\15\40\0\1\17\40\0"+
    "\17\15\1\0\17\15\2\0\2\20\1\21\35\15\41\0"+
    "\3\21\36\0\1\22\1\114\7\115\1\116\3\115\3\0"+
    "\1\22\1\114\1\0\2\114\1\22\1\114\1\22\3\114"+
    "\2\117\1\120\6\0\23\114\10\0\1\115\1\0\15\23"+
    "\1\121\2\0\2\23\1\0\12\23\7\0\23\23\10\0"+
    "\1\23\1\0\1\122\1\23\13\122\3\0\1\122\1\23"+
    "\1\0\2\23\1\122\1\23\1\122\5\23\7\0\23\23"+
    "\10\0\1\122\4\0\1\123\75\0\1\122\1\23\2\122"+
    "\1\124\7\122\1\125\3\0\1\122\1\23\1\0\2\23"+
    "\1\122\1\23\1\122\5\23\7\0\23\23\10\0\1\122"+
    "\5\0\1\126\74\0\1\127\5\0\2\130\10\0\1\127"+
    "\4\0\1\127\1\0\1\127\5\0\1\131\53\0\1\132"+
    "\1\110\67\0\1\122\1\23\2\122\1\32\10\122\3\0"+
    "\1\122\1\23\1\0\2\23\1\122\1\23\1\122\5\23"+
    "\7\0\23\23\10\0\1\122\1\0\1\133\1\134\1\135"+
    "\1\0\1\136\3\0\1\135\1\0\3\135\1\137\2\0"+
    "\1\133\1\134\1\0\2\134\1\133\1\134\1\133\5\134"+
    "\7\0\23\134\10\0\1\135\1\0\1\140\1\141\1\142"+
    "\1\0\1\143\1\144\2\145\1\146\1\145\1\146\2\143"+
    "\1\147\2\0\1\140\1\141\1\0\2\141\1\140\1\141"+
    "\1\140\5\141\7\0\23\141\10\0\1\142\17\150\1\151"+
    "\1\0\60\150\22\0\1\152\1\153\2\154\1\0\1\155"+
    "\1\0\1\156\1\0\1\157\11\0\1\156\1\160\1\161"+
    "\1\162\1\0\1\163\2\0\1\155\12\0\1\164\1\0"+
    "\1\165\7\0\15\23\1\121\2\0\2\23\1\0\11\23"+
    "\1\166\7\0\6\23\1\167\1\170\13\23\10\0\1\23"+
    "\1\0\15\23\1\121\2\0\2\23\1\0\1\23\1\171"+
    "\10\23\7\0\2\23\1\172\4\23\1\173\13\23\10\0"+
    "\1\23\1\0\15\23\1\121\2\0\2\23\1\0\12\23"+
    "\7\0\1\174\2\23\1\175\3\23\1\176\13\23\10\0"+
    "\1\23\1\0\1\177\5\0\2\200\10\0\1\177\4\0"+
    "\1\177\1\0\1\177\5\0\1\201\102\0\1\46\41\0"+
    "\15\23\1\121\2\0\2\23\1\0\12\23\7\0\10\23"+
    "\1\202\10\23\1\203\1\23\10\0\1\23\1\0\15\23"+
    "\1\121\2\0\1\23\1\204\1\0\12\23\7\0\10\23"+
    "\1\205\4\23\1\206\4\23\1\207\10\0\1\23\1\0"+
    "\15\23\1\121\2\0\2\23\1\0\11\23\1\210\7\0"+
    "\7\23\1\211\11\23\1\212\1\23\10\0\1\23\1\0"+
    "\15\23\1\121\2\0\2\23\1\0\11\23\1\213\7\0"+
    "\23\23\10\0\1\23\1\0\15\23\1\121\2\0\2\23"+
    "\1\0\11\23\1\214\7\0\10\23\1\215\4\23\1\216"+
    "\5\23\10\0\1\23\1\0\15\23\1\121\2\0\2\23"+
    "\1\0\12\23\7\0\1\23\1\217\21\23\10\0\1\23"+
    "\1\0\15\23\1\121\2\0\2\23\1\0\7\23\1\220"+
    "\2\23\7\0\23\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\2\23\1\0\12\23\7\0\21\23\1\221\1\23"+
    "\10\0\1\23\1\0\15\23\1\121\2\0\2\23\1\0"+
    "\11\23\1\222\7\0\10\23\1\223\12\23\10\0\1\23"+
    "\1\0\15\23\1\121\2\0\2\23\1\0\11\23\1\224"+
    "\7\0\23\23\10\0\1\23\1\0\15\23\1\121\2\0"+
    "\2\23\1\0\12\23\7\0\2\23\1\225\1\226\17\23"+
    "\10\0\1\23\1\0\15\23\1\121\2\0\1\23\1\227"+
    "\1\0\7\23\1\230\2\23\7\0\7\23\1\231\1\232"+
    "\12\23\10\0\1\23\1\0\15\23\1\121\2\0\2\23"+
    "\1\0\7\23\1\233\1\23\1\234\7\0\10\23\1\235"+
    "\12\23\10\0\1\23\1\0\15\23\1\121\2\0\2\23"+
    "\1\0\7\23\1\236\2\23\7\0\23\23\10\0\1\23"+
    "\1\0\15\23\1\121\2\0\2\23\1\0\12\23\7\0"+
    "\3\23\1\237\1\240\16\23\10\0\1\23\12\0\1\241"+
    "\77\0\1\242\106\0\1\243\1\0\2\243\2\0\1\243"+
    "\5\0\1\243\1\0\1\243\6\0\1\243\1\0\3\243"+
    "\70\0\1\106\40\0\37\110\2\0\40\110\40\0\1\113"+
    "\41\0\1\115\1\23\13\115\3\0\1\115\1\23\1\0"+
    "\2\23\1\115\1\23\1\115\5\23\7\0\23\23\10\0"+
    "\1\115\1\0\1\115\1\114\13\115\3\0\1\115\1\114"+
    "\1\0\2\114\1\115\1\114\1\115\5\114\7\0\23\114"+
    "\10\0\1\115\1\0\1\244\1\114\13\115\3\0\1\244"+
    "\1\114\1\0\2\114\1\244\1\114\1\244\5\114\7\0"+
    "\23\114\10\0\1\115\1\0\1\244\1\23\4\115\2\245"+
    "\5\115\3\0\1\244\1\23\1\0\2\23\1\244\1\23"+
    "\1\244\5\23\7\0\23\23\10\0\1\115\1\0\1\177"+
    "\5\0\2\200\10\0\1\177\4\0\1\177\1\0\1\177"+
    "\3\0\2\246\44\0\1\133\1\134\1\135\1\0\1\247"+
    "\1\250\1\0\1\251\1\252\1\251\1\252\2\247\1\253"+
    "\2\0\1\133\1\134\1\0\2\134\1\133\1\134\1\133"+
    "\5\134\7\0\23\134\10\0\1\135\5\0\1\254\74\0"+
    "\1\127\10\0\1\255\6\0\1\127\4\0\1\127\1\0"+
    "\1\127\3\0\2\246\1\120\43\0\1\256\17\0\1\256"+
    "\4\0\1\256\1\0\1\256\51\0\1\177\5\0\2\200"+
    "\10\0\1\177\4\0\1\177\1\0\1\177\51\0\1\133"+
    "\1\257\13\133\3\0\1\133\1\257\1\0\2\257\1\133"+
    "\1\257\1\133\5\257\7\0\23\257\10\0\1\133\1\0"+
    "\15\134\3\0\2\134\1\0\12\134\7\0\23\134\10\0"+
    "\1\134\1\0\1\135\1\134\13\135\3\0\1\135\1\134"+
    "\1\0\2\134\1\135\1\134\1\135\5\134\7\0\23\134"+
    "\10\0\1\135\1\0\1\140\1\260\13\140\3\0\1\140"+
    "\1\260\1\0\2\260\1\140\1\260\1\140\5\260\7\0"+
    "\23\260\10\0\1\140\1\0\15\141\1\261\2\0\2\141"+
    "\1\0\12\141\7\0\23\141\10\0\1\141\1\0\1\142"+
    "\1\141\13\142\3\0\1\142\1\141\1\0\2\141\1\142"+
    "\1\141\1\142\5\141\7\0\23\141\10\0\1\142\1\0"+
    "\1\142\1\141\2\142\1\146\10\142\1\261\2\0\1\142"+
    "\1\141\1\0\2\141\1\142\1\141\1\142\5\141\7\0"+
    "\23\141\10\0\1\142\5\0\1\262\10\0\1\261\100\0"+
    "\1\261\63\0\1\142\1\141\13\142\1\261\2\0\1\142"+
    "\1\141\1\0\2\141\1\142\1\141\1\142\5\141\7\0"+
    "\23\141\10\0\1\142\5\0\1\145\113\0\1\263\77\0"+
    "\1\150\1\264\2\150\2\0\1\150\5\0\1\150\1\0"+
    "\1\150\10\0\3\150\65\0\1\265\64\0\1\266\4\0"+
    "\1\266\73\0\1\267\4\0\1\267\1\0\1\267\51\0"+
    "\1\270\17\0\1\270\2\0\3\270\1\0\1\270\1\0"+
    "\4\270\11\0\1\270\10\0\1\270\2\0\1\270\71\0"+
    "\1\271\61\0\1\272\100\0\1\273\44\0\15\23\1\121"+
    "\2\0\2\23\1\0\12\23\7\0\7\23\1\274\4\23"+
    "\1\275\6\23\10\0\1\23\1\0\15\23\1\121\2\0"+
    "\2\23\1\0\12\23\7\0\10\23\1\276\12\23\10\0"+
    "\1\23\1\0\15\23\1\121\2\0\2\23\1\0\12\23"+
    "\7\0\10\23\1\277\12\23\10\0\1\23\1\0\15\23"+
    "\1\121\2\0\2\23\1\0\12\23\7\0\1\23\1\300"+
    "\21\23\10\0\1\23\1\0\15\23\1\121\2\0\2\23"+
    "\1\0\12\23\7\0\7\23\1\301\13\23\10\0\1\23"+
    "\1\0\15\23\1\121\2\0\2\23\1\0\12\23\7\0"+
    "\16\23\1\302\1\303\3\23\10\0\1\23\1\0\15\23"+
    "\1\121\2\0\2\23\1\0\12\23\7\0\13\23\1\304"+
    "\7\23\10\0\1\23\1\0\15\23\1\121\2\0\2\23"+
    "\1\0\12\23\7\0\4\23\1\305\16\23\10\0\1\23"+
    "\1\0\1\177\17\0\1\177\4\0\1\177\1\0\1\177"+
    "\3\0\2\246\44\0\1\177\17\0\1\177\4\0\1\177"+
    "\1\0\1\177\106\0\1\306\43\0\15\23\1\121\2\0"+
    "\2\23\1\0\11\23\1\307\7\0\23\23\10\0\1\23"+
    "\1\0\15\23\1\121\2\0\2\23\1\0\12\23\7\0"+
    "\10\23\1\310\12\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\1\23\1\311\1\0\12\23\7\0\23\23\10\0"+
    "\1\23\1\0\15\23\1\121\2\0\2\23\1\0\12\23"+
    "\7\0\3\23\1\312\17\23\10\0\1\23\1\0\15\23"+
    "\1\121\2\0\2\23\1\0\12\23\7\0\3\23\1\313"+
    "\17\23\10\0\1\23\1\0\15\23\1\121\2\0\2\23"+
    "\1\0\12\23\7\0\7\23\1\314\13\23\10\0\1\23"+
    "\1\0\15\23\1\121\2\0\2\23\1\0\12\23\7\0"+
    "\10\23\1\315\12\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\2\23\1\0\7\23\1\316\2\23\7\0\23\23"+
    "\10\0\1\23\1\0\15\23\1\121\2\0\2\23\1\0"+
    "\12\23\7\0\6\23\1\317\14\23\10\0\1\23\1\0"+
    "\15\23\1\121\2\0\2\23\1\0\12\23\7\0\1\23"+
    "\1\320\21\23\10\0\1\23\1\0\15\23\1\121\2\0"+
    "\2\23\1\0\12\23\7\0\16\23\1\321\4\23\10\0"+
    "\1\23\1\0\15\23\1\121\2\0\2\23\1\0\1\23"+
    "\1\322\10\23\7\0\23\23\10\0\1\23\1\0\15\23"+
    "\1\121\2\0\2\23\1\0\12\23\7\0\21\23\1\323"+
    "\1\23\10\0\1\23\1\0\15\23\1\121\2\0\1\23"+
    "\1\324\1\0\12\23\7\0\23\23\10\0\1\23\1\0"+
    "\15\23\1\121\2\0\2\23\1\0\11\23\1\325\7\0"+
    "\15\23\1\326\5\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\2\23\1\0\12\23\7\0\2\23\1\327\20\23"+
    "\10\0\1\23\1\0\15\23\1\121\2\0\2\23\1\0"+
    "\12\23\7\0\20\23\1\330\2\23\10\0\1\23\1\0"+
    "\15\23\1\121\2\0\2\23\1\0\12\23\7\0\3\23"+
    "\1\331\17\23\10\0\1\23\1\0\15\23\1\121\2\0"+
    "\2\23\1\0\11\23\1\332\7\0\23\23\10\0\1\23"+
    "\1\0\15\23\1\121\2\0\2\23\1\0\12\23\7\0"+
    "\4\23\1\333\16\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\2\23\1\0\7\23\1\334\1\23\1\335\7\0"+
    "\23\23\10\0\1\23\1\0\15\23\1\121\2\0\2\23"+
    "\1\0\12\23\7\0\3\23\1\336\13\23\1\337\3\23"+
    "\10\0\1\23\1\0\15\23\1\121\2\0\2\23\1\0"+
    "\12\23\7\0\16\23\1\340\4\23\10\0\1\23\1\0"+
    "\15\23\1\121\2\0\2\23\1\0\12\23\7\0\1\23"+
    "\1\341\21\23\10\0\1\23\1\0\15\23\1\121\2\0"+
    "\2\23\1\0\12\23\7\0\13\23\1\342\7\23\10\0"+
    "\1\23\1\0\15\23\1\121\2\0\2\23\1\0\12\23"+
    "\7\0\3\23\1\343\17\23\10\0\1\23\1\0\15\23"+
    "\1\121\2\0\2\23\1\0\12\23\7\0\1\23\1\344"+
    "\5\23\1\345\13\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\2\23\1\0\11\23\1\346\7\0\15\23\1\347"+
    "\5\23\10\0\1\23\1\0\1\244\1\114\4\115\2\116"+
    "\5\115\3\0\1\244\1\114\1\0\2\114\1\244\1\114"+
    "\1\244\5\114\7\0\23\114\10\0\1\115\1\0\1\350"+
    "\5\0\2\351\10\0\1\350\4\0\1\350\1\0\1\350"+
    "\51\0\1\135\1\134\2\135\1\252\10\135\3\0\1\135"+
    "\1\134\1\0\2\134\1\135\1\134\1\135\5\134\7\0"+
    "\23\134\10\0\1\135\5\0\1\352\100\0\1\251\74\0"+
    "\1\350\17\0\1\350\4\0\1\350\1\0\1\350\51\0"+
    "\1\256\17\0\1\256\4\0\1\256\1\0\1\256\3\0"+
    "\2\246\1\120\43\0\1\133\1\134\13\133\3\0\1\133"+
    "\1\134\1\0\2\134\1\133\1\134\1\133\5\134\7\0"+
    "\23\134\10\0\1\133\1\0\1\140\1\141\13\140\3\0"+
    "\1\140\1\141\1\0\2\141\1\140\1\141\1\140\5\141"+
    "\7\0\23\141\10\0\1\140\5\0\1\145\10\0\1\261"+
    "\133\0\1\353\103\0\1\354\71\0\1\355\106\0\1\356"+
    "\26\0\15\23\1\121\2\0\2\23\1\0\12\23\7\0"+
    "\10\23\1\357\12\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\2\23\1\0\12\23\7\0\15\23\1\360\5\23"+
    "\10\0\1\23\1\0\15\23\1\121\2\0\2\23\1\0"+
    "\12\23\7\0\16\23\1\361\4\23\10\0\1\23\1\0"+
    "\15\23\1\121\2\0\2\23\1\0\12\23\7\0\11\23"+
    "\1\362\11\23\10\0\1\23\1\0\15\23\1\121\2\0"+
    "\2\23\1\0\11\23\1\363\7\0\23\23\10\0\1\23"+
    "\1\0\15\23\1\121\2\0\2\23\1\0\11\23\1\364"+
    "\7\0\23\23\10\0\1\23\1\0\15\23\1\121\2\0"+
    "\2\23\1\0\12\23\7\0\10\23\1\365\12\23\10\0"+
    "\1\23\1\0\15\23\1\121\2\0\2\23\1\0\11\23"+
    "\1\366\7\0\23\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\2\23\1\0\12\23\7\0\3\23\1\367\17\23"+
    "\10\0\1\23\1\0\15\23\1\121\2\0\2\23\1\0"+
    "\12\23\7\0\20\23\1\370\2\23\10\0\1\23\1\0"+
    "\15\23\1\121\2\0\2\23\1\0\7\23\1\371\2\23"+
    "\7\0\23\23\10\0\1\23\1\0\15\23\1\121\2\0"+
    "\2\23\1\0\12\23\7\0\16\23\1\372\4\23\10\0"+
    "\1\23\1\0\15\23\1\121\2\0\2\23\1\0\11\23"+
    "\1\373\7\0\23\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\2\23\1\0\12\23\7\0\1\23\1\374\21\23"+
    "\10\0\1\23\1\0\15\23\1\121\2\0\1\23\1\375"+
    "\1\0\12\23\7\0\23\23\10\0\1\23\1\0\15\23"+
    "\1\121\2\0\2\23\1\0\11\23\1\376\7\0\23\23"+
    "\10\0\1\23\1\0\15\23\1\121\2\0\2\23\1\0"+
    "\7\23\1\377\2\23\7\0\23\23\10\0\1\23\1\0"+
    "\15\23\1\121\2\0\1\23\1\u0100\1\0\12\23\7\0"+
    "\23\23\10\0\1\23\1\0\15\23\1\121\2\0\2\23"+
    "\1\0\11\23\1\u0101\7\0\23\23\10\0\1\23\1\0"+
    "\15\23\1\121\2\0\2\23\1\0\12\23\7\0\15\23"+
    "\1\u0102\5\23\10\0\1\23\1\0\15\23\1\121\2\0"+
    "\2\23\1\0\12\23\7\0\3\23\1\u0103\17\23\10\0"+
    "\1\23\1\0\15\23\1\121\2\0\2\23\1\0\12\23"+
    "\7\0\7\23\1\u0104\13\23\10\0\1\23\1\0\15\23"+
    "\1\121\2\0\2\23\1\0\12\23\7\0\15\23\1\u0105"+
    "\5\23\10\0\1\23\1\0\15\23\1\121\2\0\2\23"+
    "\1\0\7\23\1\u0106\2\23\7\0\23\23\10\0\1\23"+
    "\1\0\15\23\1\121\2\0\2\23\1\0\11\23\1\u0107"+
    "\7\0\23\23\10\0\1\23\1\0\15\23\1\121\2\0"+
    "\2\23\1\0\7\23\1\u0108\2\23\7\0\23\23\10\0"+
    "\1\23\1\0\15\23\1\121\2\0\2\23\1\0\11\23"+
    "\1\u0109\7\0\23\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\2\23\1\0\12\23\7\0\4\23\1\u010a\16\23"+
    "\10\0\1\23\1\0\15\23\1\121\2\0\2\23\1\0"+
    "\7\23\1\u010b\2\23\7\0\23\23\10\0\1\23\1\0"+
    "\15\23\1\121\2\0\2\23\1\0\12\23\7\0\4\23"+
    "\1\u010c\16\23\10\0\1\23\1\0\15\23\1\121\2\0"+
    "\2\23\1\0\12\23\7\0\6\23\1\u010d\14\23\10\0"+
    "\1\23\1\0\15\23\1\121\2\0\1\23\1\u010e\1\0"+
    "\12\23\7\0\23\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\2\23\1\0\12\23\7\0\21\23\1\u010f\1\23"+
    "\10\0\1\23\1\0\15\23\1\121\2\0\2\23\1\0"+
    "\12\23\7\0\22\23\1\u0110\10\0\1\23\1\0\15\23"+
    "\1\121\2\0\2\23\1\0\12\23\7\0\13\23\1\u0111"+
    "\7\23\10\0\1\23\1\0\15\23\1\121\2\0\2\23"+
    "\1\0\12\23\7\0\15\23\1\u0112\5\23\10\0\1\23"+
    "\1\0\15\23\1\121\2\0\2\23\1\0\11\23\1\u0113"+
    "\7\0\23\23\10\0\1\23\1\0\15\23\1\121\2\0"+
    "\2\23\1\0\12\23\7\0\3\23\1\u0114\17\23\10\0"+
    "\1\23\1\0\1\350\5\0\2\255\10\0\1\350\4\0"+
    "\1\350\1\0\1\350\116\0\1\u0115\41\0\1\u0116\137\0"+
    "\1\u0117\33\0\15\23\1\121\2\0\2\23\1\0\12\23"+
    "\7\0\12\23\1\u0118\10\23\10\0\1\23\1\0\15\23"+
    "\1\121\2\0\2\23\1\0\12\23\7\0\3\23\1\u0119"+
    "\17\23\10\0\1\23\1\0\15\23\1\121\2\0\2\23"+
    "\1\0\12\23\7\0\5\23\1\u011a\15\23\10\0\1\23"+
    "\1\0\15\23\1\121\2\0\2\23\1\0\11\23\1\u011b"+
    "\7\0\23\23\10\0\1\23\1\0\15\23\1\121\2\0"+
    "\1\23\1\u011c\1\0\12\23\7\0\23\23\10\0\1\23"+
    "\1\0\15\23\1\121\2\0\2\23\1\0\12\23\7\0"+
    "\17\23\1\u011d\3\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\1\23\1\u011e\1\0\12\23\7\0\23\23\10\0"+
    "\1\23\1\0\15\23\1\121\2\0\2\23\1\0\12\23"+
    "\7\0\15\23\1\u011f\5\23\10\0\1\23\1\0\15\23"+
    "\1\121\2\0\2\23\1\0\12\23\7\0\7\23\1\u0120"+
    "\13\23\10\0\1\23\1\0\15\23\1\121\2\0\2\23"+
    "\1\0\12\23\7\0\1\23\1\u0121\21\23\10\0\1\23"+
    "\1\0\15\23\1\121\2\0\2\23\1\0\12\23\7\0"+
    "\16\23\1\u0122\4\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\2\23\1\0\11\23\1\u0123\7\0\23\23\10\0"+
    "\1\23\1\0\15\23\1\121\2\0\2\23\1\0\12\23"+
    "\7\0\13\23\1\u0124\7\23\10\0\1\23\1\0\15\23"+
    "\1\121\2\0\2\23\1\0\12\23\7\0\7\23\1\u0125"+
    "\13\23\10\0\1\23\1\0\15\23\1\121\2\0\2\23"+
    "\1\0\7\23\1\u0126\2\23\7\0\23\23\10\0\1\23"+
    "\1\0\15\23\1\121\2\0\1\23\1\u0127\1\0\12\23"+
    "\7\0\23\23\10\0\1\23\1\0\15\23\1\121\2\0"+
    "\2\23\1\0\7\23\1\u0128\2\23\7\0\23\23\10\0"+
    "\1\23\1\0\15\23\1\121\2\0\2\23\1\0\11\23"+
    "\1\u0129\7\0\23\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\2\23\1\0\12\23\7\0\3\23\1\u012a\17\23"+
    "\10\0\1\23\1\0\15\23\1\121\2\0\2\23\1\0"+
    "\12\23\7\0\15\23\1\u012b\5\23\10\0\1\23\1\0"+
    "\15\23\1\121\2\0\1\23\1\u012c\1\0\12\23\7\0"+
    "\23\23\10\0\1\23\1\0\15\23\1\121\2\0\2\23"+
    "\1\0\12\23\7\0\1\23\1\u012d\21\23\10\0\1\23"+
    "\1\0\15\23\1\121\2\0\2\23\1\0\12\23\7\0"+
    "\4\23\1\u012e\16\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\2\23\1\0\12\23\7\0\3\23\1\u012f\17\23"+
    "\10\0\1\23\1\0\15\23\1\121\2\0\2\23\1\0"+
    "\12\23\7\0\1\23\1\u0130\21\23\10\0\1\23\1\0"+
    "\6\23\1\u0131\6\23\1\121\2\0\2\23\1\0\12\23"+
    "\7\0\23\23\10\0\1\23\1\0\15\23\1\121\2\0"+
    "\2\23\1\0\12\23\7\0\10\23\1\u0132\12\23\10\0"+
    "\1\23\1\0\15\23\1\121\2\0\2\23\1\0\12\23"+
    "\7\0\10\23\1\u0133\12\23\10\0\1\23\1\0\15\23"+
    "\1\121\2\0\2\23\1\0\12\23\7\0\7\23\1\u0134"+
    "\13\23\10\0\1\23\1\0\15\23\1\121\2\0\2\23"+
    "\1\0\12\23\7\0\7\23\1\u0135\13\23\10\0\1\23"+
    "\1\0\15\23\1\121\2\0\2\23\1\0\12\23\7\0"+
    "\7\23\1\u0136\13\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\2\23\1\0\12\23\7\0\4\23\1\u0137\16\23"+
    "\10\0\1\23\1\0\15\23\1\121\2\0\2\23\1\0"+
    "\12\23\7\0\14\23\1\u0138\6\23\10\0\1\23\52\0"+
    "\1\u0139\27\0\15\23\1\121\2\0\2\23\1\0\12\23"+
    "\7\0\12\23\1\u013a\10\23\10\0\1\23\1\0\15\23"+
    "\1\121\2\0\2\23\1\0\12\23\7\0\1\23\1\u013b"+
    "\21\23\10\0\1\23\1\0\15\23\1\121\2\0\2\23"+
    "\1\0\12\23\7\0\1\23\1\u013c\21\23\10\0\1\23"+
    "\1\0\15\23\1\121\2\0\2\23\1\0\12\23\7\0"+
    "\2\23\1\u013d\20\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\2\23\1\0\12\23\7\0\7\23\1\u013e\13\23"+
    "\10\0\1\23\1\0\15\23\1\121\2\0\2\23\1\0"+
    "\12\23\7\0\15\23\1\u013f\5\23\10\0\1\23\1\0"+
    "\15\23\1\121\2\0\2\23\1\0\12\23\7\0\1\23"+
    "\1\u0140\21\23\10\0\1\23\1\0\15\23\1\121\2\0"+
    "\2\23\1\0\12\23\7\0\13\23\1\u0141\7\23\10\0"+
    "\1\23\1\0\6\23\1\u0142\6\23\1\121\2\0\2\23"+
    "\1\0\12\23\7\0\23\23\10\0\1\23\1\0\15\23"+
    "\1\121\2\0\1\23\1\u0143\1\0\12\23\7\0\23\23"+
    "\10\0\1\23\1\0\15\23\1\121\2\0\2\23\1\0"+
    "\12\23\7\0\12\23\1\u0144\10\23\10\0\1\23\1\0"+
    "\15\23\1\121\2\0\2\23\1\0\1\23\1\u0145\10\23"+
    "\7\0\23\23\10\0\1\23\1\0\15\23\1\121\2\0"+
    "\2\23\1\0\11\23\1\u0146\7\0\23\23\10\0\1\23"+
    "\1\0\15\23\1\121\2\0\2\23\1\0\12\23\7\0"+
    "\3\23\1\u0147\17\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\2\23\1\0\12\23\7\0\15\23\1\u0148\5\23"+
    "\10\0\1\23\1\0\15\23\1\121\2\0\2\23\1\0"+
    "\11\23\1\u0149\7\0\23\23\10\0\1\23\1\0\15\23"+
    "\1\121\2\0\2\23\1\0\12\23\7\0\22\23\1\u014a"+
    "\10\0\1\23\1\0\15\23\1\121\2\0\2\23\1\0"+
    "\7\23\1\u014b\2\23\7\0\23\23\10\0\1\23\1\0"+
    "\15\23\1\121\2\0\2\23\1\0\12\23\7\0\13\23"+
    "\1\u014c\7\23\10\0\1\23\1\0\15\23\1\121\2\0"+
    "\2\23\1\0\12\23\7\0\13\23\1\u014d\7\23\10\0"+
    "\1\23\1\0\15\23\1\121\2\0\2\23\1\0\11\23"+
    "\1\u014e\7\0\23\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\2\23\1\0\11\23\1\u014f\7\0\23\23\10\0"+
    "\1\23\1\0\15\23\1\121\2\0\2\23\1\0\12\23"+
    "\7\0\4\23\1\u0150\16\23\10\0\1\23\35\0\1\u0151"+
    "\44\0\15\23\1\121\2\0\2\23\1\0\7\23\1\u0152"+
    "\2\23\7\0\23\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\2\23\1\0\12\23\7\0\15\23\1\u0153\5\23"+
    "\10\0\1\23\1\0\15\23\1\121\2\0\2\23\1\0"+
    "\12\23\7\0\6\23\1\u0154\14\23\10\0\1\23\1\0"+
    "\15\23\1\121\2\0\2\23\1\0\12\23\7\0\10\23"+
    "\1\u0155\12\23\10\0\1\23\1\0\6\23\1\u0156\6\23"+
    "\1\121\2\0\2\23\1\0\12\23\7\0\23\23\10\0"+
    "\1\23\1\0\15\23\1\121\2\0\2\23\1\0\1\23"+
    "\1\u0157\10\23\7\0\23\23\10\0\1\23\1\0\15\23"+
    "\1\121\2\0\2\23\1\0\12\23\7\0\6\23\1\u0158"+
    "\14\23\10\0\1\23\1\0\15\23\1\121\2\0\2\23"+
    "\1\0\12\23\7\0\15\23\1\u0159\5\23\10\0\1\23"+
    "\1\0\15\23\1\121\2\0\2\23\1\0\12\23\7\0"+
    "\7\23\1\u015a\13\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\2\23\1\0\12\23\7\0\16\23\1\u015b\4\23"+
    "\10\0\1\23\1\0\15\23\1\121\2\0\2\23\1\0"+
    "\12\23\7\0\17\23\1\u015c\3\23\10\0\1\23\1\0"+
    "\15\23\1\121\2\0\2\23\1\0\12\23\7\0\3\23"+
    "\1\u015d\17\23\10\0\1\23\1\0\15\23\1\121\2\0"+
    "\2\23\1\0\12\23\7\0\10\23\1\u015e\12\23\10\0"+
    "\1\23\1\0\15\23\1\121\2\0\1\23\1\u015f\1\0"+
    "\12\23\7\0\23\23\10\0\1\23\53\0\1\u0160\26\0"+
    "\15\23\1\121\2\0\1\23\1\u0161\1\0\12\23\7\0"+
    "\23\23\10\0\1\23\1\0\15\23\1\121\2\0\2\23"+
    "\1\0\12\23\7\0\10\23\1\u0162\12\23\10\0\1\23"+
    "\1\0\15\23\1\121\2\0\2\23\1\0\12\23\7\0"+
    "\3\23\1\u0163\17\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\2\23\1\0\12\23\7\0\4\23\1\u0164\16\23"+
    "\10\0\1\23\1\0\15\23\1\121\2\0\2\23\1\0"+
    "\12\23\7\0\6\23\1\u0165\14\23\10\0\1\23\1\0"+
    "\15\23\1\121\2\0\2\23\1\0\12\23\7\0\4\23"+
    "\1\u0166\16\23\10\0\1\23\1\0\15\23\1\121\2\0"+
    "\2\23\1\0\11\23\1\u0167\7\0\23\23\10\0\1\23"+
    "\1\0\15\23\1\121\2\0\2\23\1\0\12\23\7\0"+
    "\1\23\1\u0168\21\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\2\23\1\0\12\23\7\0\12\23\1\u0169\10\23"+
    "\10\0\1\23\51\0\1\u016a\30\0\15\23\1\121\2\0"+
    "\2\23\1\0\12\23\7\0\13\23\1\u016b\7\23\10\0"+
    "\1\23\1\0\15\23\1\121\2\0\2\23\1\0\12\23"+
    "\7\0\3\23\1\u016c\17\23\10\0\1\23\1\0\15\23"+
    "\1\121\2\0\2\23\1\0\12\23\7\0\6\23\1\u016d"+
    "\14\23\10\0\1\23\1\0\15\23\1\121\2\0\2\23"+
    "\1\0\11\23\1\u016e\7\0\23\23\10\0\1\23\1\0"+
    "\15\23\1\121\2\0\2\23\1\0\12\23\7\0\3\23"+
    "\1\u016f\17\23\10\0\1\23\1\0\15\23\1\121\2\0"+
    "\2\23\1\0\12\23\7\0\4\23\1\u0170\16\23\10\0"+
    "\1\23\1\0\15\23\1\121\2\0\2\23\1\0\12\23"+
    "\7\0\20\23\1\u0171\2\23\10\0\1\23\1\0\6\23"+
    "\1\u0172\6\23\1\121\2\0\2\23\1\0\12\23\7\0"+
    "\23\23\10\0\1\23\1\0\15\23\1\121\2\0\2\23"+
    "\1\0\1\23\1\u0173\10\23\7\0\23\23\10\0\1\23"+
    "\1\0\15\23\1\121\2\0\2\23\1\0\12\23\7\0"+
    "\20\23\1\u0174\2\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\2\23\1\0\12\23\7\0\10\23\1\u0175\12\23"+
    "\10\0\1\23\1\0\15\23\1\121\2\0\2\23\1\0"+
    "\11\23\1\u0176\7\0\23\23\10\0\1\23\1\0\15\23"+
    "\1\121\2\0\2\23\1\0\12\23\7\0\7\23\1\u0177"+
    "\13\23\10\0\1\23\1\0\15\23\1\121\2\0\2\23"+
    "\1\0\12\23\7\0\1\23\1\u0178\21\23\10\0\1\23"+
    "\1\0\15\23\1\121\2\0\2\23\1\0\12\23\7\0"+
    "\4\23\1\u0179\16\23\10\0\1\23\1\0\15\23\1\121"+
    "\2\0\2\23\1\0\12\23\7\0\21\23\1\u017a\1\23"+
    "\10\0\1\23\1\0\15\23\1\121\2\0\2\23\1\0"+
    "\12\23\7\0\10\23\1\u017b\12\23\10\0\1\23\1\0"+
    "\15\23\1\121\2\0\2\23\1\0\12\23\7\0\13\23"+
    "\1\u017c\7\23\10\0\1\23";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\2\1\1\11\5\1\1\11\26\1\2\11"+
    "\17\1\10\11\1\1\1\11\2\1\1\11\2\1\2\11"+
    "\3\1\1\11\4\0\2\1\1\0\1\11\4\1\2\0"+
    "\1\11\1\0\1\1\1\0\1\1\1\11\1\0\1\1"+
    "\1\0\4\1\4\0\1\11\4\0\2\11\2\0\2\11"+
    "\12\1\2\0\37\1\3\11\1\1\2\0\1\1\1\0"+
    "\1\11\1\1\1\0\1\11\5\0\1\1\1\11\1\1"+
    "\1\0\3\1\3\0\12\1\1\11\42\1\1\0\1\1"+
    "\3\0\1\11\46\1\1\11\1\0\1\11\41\1\1\0"+
    "\27\1\1\0\16\1\1\0\11\1\1\11\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    int commentLevel = 0;


  _DylanLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _DylanLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 25: 
          { return DylanTypes.RBRACE;
          }
        case 105: break;
        case 84: 
          { return DylanTypes.DEFINE;
          }
        case 106: break;
        case 23: 
          { return DylanTypes.RBRACKET;
          }
        case 107: break;
        case 24: 
          { return DylanTypes.LBRACE;
          }
        case 108: break;
        case 46: 
          { return DylanTypes.HASH_PAREN;
          }
        case 109: break;
        case 83: 
          { return DylanTypes.SELECT;
          }
        case 110: break;
        case 61: 
          { return DylanTypes.USE;
          }
        case 111: break;
        case 96: 
          { return DylanTypes.KEYED_BY;
          }
        case 112: break;
        case 104: 
          { return DylanTypes.COPY_DOWN_METHOD;
          }
        case 113: break;
        case 86: 
          { return DylanTypes.CREATE;
          }
        case 114: break;
        case 19: 
          { yybegin(STRING); return DylanTypes.STRING_CHARACTER;
          }
        case 115: break;
        case 47: 
          { return DylanTypes.HASH_BRACKET;
          }
        case 116: break;
        case 31: 
          { yybegin(DYLAN_CODE); return DylanTypes.CRLF;
          }
        case 117: break;
        case 28: 
          { return DylanTypes.VARIABLE_IGNORE;
          }
        case 118: break;
        case 50: 
          { return DylanTypes.IF;
          }
        case 119: break;
        case 65: 
          { return DylanTypes.FROM;
          }
        case 120: break;
        case 101: 
          { return DylanTypes.OTHERWISE;
          }
        case 121: break;
        case 70: 
          { return DylanTypes.HASH_NEXT;
          }
        case 122: break;
        case 79: 
          { return DylanTypes.UNTIL;
          }
        case 123: break;
        case 55: 
          { return DylanTypes.CHARACTER_LITERAL;
          }
        case 124: break;
        case 21: 
          { return DylanTypes.RPAREN;
          }
        case 125: break;
        case 22: 
          { return DylanTypes.LBRACKET;
          }
        case 126: break;
        case 41: 
          { return DylanTypes.ESCAPED_WORD;
          }
        case 127: break;
        case 29: 
          { return DylanTypes.COMMENT;
          }
        case 128: break;
        case 30: 
          { return DylanTypes.STRING_CHARACTER;
          }
        case 129: break;
        case 72: 
          { return DylanTypes.BEGIN;
          }
        case 130: break;
        case 48: 
          { return DylanTypes.BY;
          }
        case 131: break;
        case 100: 
          { return DylanTypes.EXCEPTION;
          }
        case 132: break;
        case 17: 
          { return DylanTypes.DOT;
          }
        case 133: break;
        case 5: 
          { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
          }
        case 134: break;
        case 43: 
          { return DylanTypes.HASH_HASH;
          }
        case 135: break;
        case 44: 
          { return DylanTypes.HASH_T;
          }
        case 136: break;
        case 8: 
          { return TokenType.WHITE_SPACE;
          }
        case 137: break;
        case 49: 
          { return DylanTypes.TO;
          }
        case 138: break;
        case 63: 
          { return DylanTypes.ELSE;
          }
        case 139: break;
        case 39: 
          { return DylanTypes.CONSTRAINED_NAME;
          }
        case 140: break;
        case 40: 
          { return DylanTypes.COLON_COLON;
          }
        case 141: break;
        case 20: 
          { return DylanTypes.LPAREN;
          }
        case 142: break;
        case 54: 
          { return DylanTypes.STRING_ESCAPE_CHARACTER;
          }
        case 143: break;
        case 64: 
          { return DylanTypes.THEN;
          }
        case 144: break;
        case 52: 
          { commentLevel--; if (commentLevel == 0) { yybegin(DYLAN_CODE);} return DylanTypes.COMMENT;
          }
        case 145: break;
        case 66: 
          { return DylanTypes.SLOT;
          }
        case 146: break;
        case 76: 
          { return DylanTypes.WHILE;
          }
        case 147: break;
        case 12: 
          { return DylanTypes.EQUAL;
          }
        case 148: break;
        case 93: 
          { return DylanTypes.CLEANUP;
          }
        case 149: break;
        case 75: 
          { return DylanTypes.LOCAL;
          }
        case 150: break;
        case 34: 
          { return DylanTypes.KEYWORD;
          }
        case 151: break;
        case 94: 
          { return DylanTypes.HANDLER_T;
          }
        case 152: break;
        case 82: 
          { return DylanTypes.ELSEIF;
          }
        case 153: break;
        case 68: 
          { return DylanTypes.CASE;
          }
        case 154: break;
        case 9: 
          { return DylanTypes.NUMBER;
          }
        case 155: break;
        case 97: 
          { return DylanTypes.VARIABLE_T;
          }
        case 156: break;
        case 11: 
          { return DylanTypes.QUERY;
          }
        case 157: break;
        case 3: 
          { yybegin(WAITING_VALUE); return DylanTypes.HEADER_SEPARATOR;
          }
        case 158: break;
        case 33: 
          { yybegin(DYLAN_CODE); return  DylanTypes.CRLF;
          }
        case 159: break;
        case 90: 
          { return DylanTypes.FINALLY;
          }
        case 160: break;
        case 69: 
          { return DylanTypes.HASH_REST;
          }
        case 161: break;
        case 10: 
          { return DylanTypes.NONDEFINING_NONEXPRESSION_WORD;
          }
        case 162: break;
        case 45: 
          { return DylanTypes.HASH_F;
          }
        case 163: break;
        case 81: 
          { return DylanTypes.EXPORT;
          }
        case 164: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 165: break;
        case 102: 
          { return DylanTypes.AFTERWARDS;
          }
        case 166: break;
        case 62: 
          { return DylanTypes.HASH_KEY;
          }
        case 167: break;
        case 56: 
          { return DylanTypes.ALL;
          }
        case 168: break;
        case 7: 
          { yybegin(YYINITIAL); return DylanTypes.CRLF;
          }
        case 169: break;
        case 80: 
          { return DylanTypes.USING;
          }
        case 170: break;
        case 38: 
          { yybegin(COMMENT_BLOCK); commentLevel++; return DylanTypes.COMMENT;
          }
        case 171: break;
        case 78: 
          { return DylanTypes.MACRO_T;
          }
        case 172: break;
        case 59: 
          { return DylanTypes.FOR;
          }
        case 173: break;
        case 26: 
          { return DylanTypes.COMMA;
          }
        case 174: break;
        case 58: 
          { return DylanTypes.ELLIPSIS;
          }
        case 175: break;
        case 37: 
          { return DylanTypes.EQUAL_ARROW;
          }
        case 176: break;
        case 95: 
          { return DylanTypes.FUNCTION;
          }
        case 177: break;
        case 18: 
          { /* return DylanTypes.CRLF; */
          }
        case 178: break;
        case 98: 
          { return DylanTypes.CONSTANT_T;
          }
        case 179: break;
        case 89: 
          { return DylanTypes.UNLESS;
          }
        case 180: break;
        case 71: 
          { return DylanTypes.BELOW;
          }
        case 181: break;
        case 14: 
          { return DylanTypes.UNARY_AND_BINARY_OPERATOR;
          }
        case 182: break;
        case 6: 
          { yybegin(YYINITIAL); return DylanTypes.VALUE;
          }
        case 183: break;
        case 85: 
          { return DylanTypes.DOMAIN;
          }
        case 184: break;
        case 27: 
          { return DylanTypes.SEMICOLON;
          }
        case 185: break;
        case 53: 
          { commentLevel++; yybegin(COMMENT_BLOCK); return DylanTypes.COMMENT;
          }
        case 186: break;
        case 103: 
          { return DylanTypes.SHARED_SYMBOLS_T;
          }
        case 187: break;
        case 91: 
          { return DylanTypes.LIBRARY;
          }
        case 188: break;
        case 36: 
          { return DylanTypes.EQUAL_EQUAL;
          }
        case 189: break;
        case 77: 
          { return DylanTypes.CLASS;
          }
        case 190: break;
        case 60: 
          { return DylanTypes.LET;
          }
        case 191: break;
        case 15: 
          { return DylanTypes.BINARY_OPERATOR_ONLY;
          }
        case 192: break;
        case 92: 
          { return DylanTypes.GENERIC;
          }
        case 193: break;
        case 88: 
          { return DylanTypes.MODULE;
          }
        case 194: break;
        case 73: 
          { return DylanTypes.BLOCK;
          }
        case 195: break;
        case 67: 
          { return DylanTypes.WHEN;
          }
        case 196: break;
        case 51: 
          { return DylanTypes.IN;
          }
        case 197: break;
        case 32: 
          { yybegin(DYLAN_CODE); return DylanTypes.STRING_CHARACTER;
          }
        case 198: break;
        case 13: 
          { return DylanTypes.UNARY_OPERATOR_ONLY;
          }
        case 199: break;
        case 35: 
          { return DylanTypes.QUERY_QUERY;
          }
        case 200: break;
        case 74: 
          { return DylanTypes.ABOVE;
          }
        case 201: break;
        case 4: 
          { return DylanTypes.CRLF;
          }
        case 202: break;
        case 57: 
          { return DylanTypes.END;
          }
        case 203: break;
        case 87: 
          { return DylanTypes.METHOD;
          }
        case 204: break;
        case 2: 
          { return DylanTypes.KEY;
          }
        case 205: break;
        case 99: 
          { return DylanTypes.HASH_ALL_KEYS;
          }
        case 206: break;
        case 42: 
          { return DylanTypes.OPERATOR_NAME;
          }
        case 207: break;
        case 16: 
          { return DylanTypes.HASH;
          }
        case 208: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
