/* The following code was generated by JFlex 1.4.3 on 10/14/13 5:53 PM */

package org.dylanfoundry.deft.filetypes.dylan;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.dylanfoundry.deft.filetypes.dylan.psi.DylanTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/14/13 5:53 PM from the specification file
 * <tt>/Users/dvoss/Documents/Projects/DeftIDEA/DeftIDEA/src/org/dylanfoundry/deft/filetypes/dylan/Dylan.flex</tt>
 */
class _DylanLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int WAITING_VALUE = 4;
  public static final int STRING = 10;
  public static final int YYINITIAL = 0;
  public static final int DYLAN_CODE = 6;
  public static final int COMMENT_BLOCK = 8;
  public static final int WAITING_SEPARATOR = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\43\1\42\1\0\1\45\1\41\22\0\1\44\1\3\1\46"+
    "\1\25\2\3\1\16\1\22\1\72\1\73\1\11\1\10\1\100\1\7"+
    "\1\40\1\12\1\23\1\30\6\32\2\1\1\20\1\101\1\14\1\5"+
    "\1\15\1\4\1\3\1\34\1\26\2\34\1\36\1\34\10\2\1\31"+
    "\10\2\1\33\2\2\1\74\1\21\1\75\1\13\1\102\1\0\1\35"+
    "\1\27\1\65\1\62\1\37\1\51\1\63\1\70\1\64\1\2\1\54"+
    "\1\56\1\67\1\52\1\57\1\66\1\2\1\24\1\53\1\50\1\71"+
    "\1\60\1\61\1\47\1\55\1\2\1\76\1\17\1\77\1\6\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\2\3\1\4\1\5\2\6\1\7"+
    "\1\10\2\11\1\7\1\12\1\13\1\1\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\3\1\1\30\3\13\1\31\2\32\1\33"+
    "\17\13\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\3\45\3\46\1\47\4\0\1\12\1\50"+
    "\1\0\1\51\1\52\1\53\1\54\1\12\2\0\1\55"+
    "\1\45\1\56\1\57\1\0\1\60\1\0\1\61\1\62"+
    "\1\0\1\63\1\0\4\64\4\0\1\65\4\0\1\66"+
    "\1\67\2\0\1\70\1\71\1\13\1\72\10\13\1\12"+
    "\2\0\1\73\25\13\1\74\1\75\12\13\1\76\1\77"+
    "\1\100\1\12\2\0\1\60\1\0\2\60\1\0\1\101"+
    "\5\0\1\64\2\102\1\0\3\12\3\0\6\13\1\103"+
    "\2\13\1\104\1\13\1\105\2\13\1\106\6\13\1\107"+
    "\30\13\1\110\1\13\1\12\1\0\1\60\3\0\1\111"+
    "\3\13\1\112\4\13\1\113\1\114\1\115\3\13\1\116"+
    "\7\13\1\117\7\13\1\120\13\13\1\121\1\0\1\122"+
    "\1\123\1\124\1\125\1\126\11\13\1\127\4\13\1\130"+
    "\6\13\1\131\3\13\1\132\3\13\1\133\1\13\1\134"+
    "\1\0\2\13\1\135\1\136\2\13\1\137\10\13\1\140"+
    "\1\13\1\141\2\13\1\142\3\13\1\143\1\144\1\13"+
    "\1\145\1\0\2\13\1\146\3\13\1\147\10\13\1\150"+
    "\1\151\2\13\1\152\1\0\2\13\1\153\1\13\1\154"+
    "\1\13\1\155\6\13\1\156\1\13\1\157\1\13\1\160"+
    "\1\13\1\161\6\13\1\162\24\13\1\163\10\13\1\164"+
    "\4\13";

  private static int [] zzUnpackAction() {
    int [] result = new int[443];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u0192\0\u025b\0\u0192\0\u029e\0\u0192\0\u02e1\0\u0324"+
    "\0\u0367\0\u0192\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9"+
    "\0\u053c\0\u057f\0\u057f\0\u0473\0\u05c2\0\u0473\0\u0605\0\u0648"+
    "\0\u0473\0\u0473\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da"+
    "\0\u081d\0\u0860\0\u08a3\0\u0192\0\u0192\0\u08e6\0\u0929\0\u096c"+
    "\0\u09af\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0b84"+
    "\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\u0192\0\u0192\0\u0192\0\u0192"+
    "\0\u0192\0\u0192\0\u0192\0\u0192\0\u0473\0\u0192\0\u0cd3\0\u0d16"+
    "\0\u0192\0\u0d59\0\u029e\0\u0192\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65"+
    "\0\u0ea8\0\u0eeb\0\u0473\0\u0192\0\u0473\0\u0473\0\u0f2e\0\u0f71"+
    "\0\u0fb4\0\u0ff7\0\u0192\0\u103a\0\u0473\0\u0473\0\u107d\0\u10c0"+
    "\0\u1103\0\u1103\0\u0192\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252"+
    "\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u0192\0\u1427"+
    "\0\u146a\0\u14ad\0\u14f0\0\u0192\0\u0192\0\u1533\0\u1576\0\u0192"+
    "\0\u0192\0\u15b9\0\u0430\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u1708"+
    "\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a\0\u0430\0\u18dd"+
    "\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5"+
    "\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d"+
    "\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u0430\0\u0430\0\u1e5c\0\u1e9f"+
    "\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7"+
    "\0\u0192\0\u0192\0\u0192\0\u0e22\0\u20fa\0\u213d\0\u2180\0\u21c3"+
    "\0\u0192\0\u1103\0\u2206\0\u0192\0\u2249\0\u228c\0\u22cf\0\u2312"+
    "\0\u0eeb\0\u2355\0\u0192\0\u135e\0\u2398\0\u1427\0\u146a\0\u14ad"+
    "\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7\0\u252a\0\u256d\0\u25b0"+
    "\0\u25f3\0\u0430\0\u2636\0\u2679\0\u0430\0\u26bc\0\u0192\0\u26ff"+
    "\0\u2742\0\u0430\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891\0\u28d4"+
    "\0\u0430\0\u2917\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u2aa9"+
    "\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1"+
    "\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9"+
    "\0\u2f1c\0\u0430\0\u2f5f\0\u2249\0\u2fa2\0\u2206\0\u2fe5\0\u3028"+
    "\0\u306b\0\u0192\0\u30ae\0\u30f1\0\u3134\0\u0430\0\u3177\0\u31ba"+
    "\0\u31fd\0\u3240\0\u3283\0\u0430\0\u0430\0\u32c6\0\u3309\0\u334c"+
    "\0\u0430\0\u338f\0\u33d2\0\u3415\0\u3458\0\u349b\0\u34de\0\u3521"+
    "\0\u0430\0\u3564\0\u35a7\0\u35ea\0\u362d\0\u3670\0\u36b3\0\u36f6"+
    "\0\u0430\0\u3739\0\u377c\0\u37bf\0\u3802\0\u3845\0\u3888\0\u38cb"+
    "\0\u390e\0\u3951\0\u3994\0\u39d7\0\u0192\0\u3a1a\0\u0192\0\u0430"+
    "\0\u0430\0\u0430\0\u0430\0\u3a5d\0\u3aa0\0\u3ae3\0\u3b26\0\u3b69"+
    "\0\u3bac\0\u3bef\0\u3c32\0\u3c75\0\u0430\0\u3cb8\0\u3cfb\0\u3d3e"+
    "\0\u3d81\0\u0430\0\u3dc4\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13"+
    "\0\u0430\0\u3f56\0\u3f99\0\u3fdc\0\u0430\0\u401f\0\u4062\0\u40a5"+
    "\0\u0430\0\u40e8\0\u0430\0\u412b\0\u416e\0\u41b1\0\u0430\0\u0430"+
    "\0\u41f4\0\u4237\0\u0430\0\u427a\0\u42bd\0\u4300\0\u4343\0\u4386"+
    "\0\u43c9\0\u440c\0\u444f\0\u0430\0\u4492\0\u0430\0\u44d5\0\u4518"+
    "\0\u0430\0\u455b\0\u459e\0\u45e1\0\u0430\0\u0430\0\u4624\0\u0430"+
    "\0\u4667\0\u46aa\0\u46ed\0\u0430\0\u4730\0\u4773\0\u47b6\0\u0430"+
    "\0\u47f9\0\u483c\0\u487f\0\u48c2\0\u4905\0\u4948\0\u498b\0\u49ce"+
    "\0\u0430\0\u0430\0\u4a11\0\u4a54\0\u0430\0\u4a97\0\u4ada\0\u4b1d"+
    "\0\u0430\0\u4b60\0\u0430\0\u4ba3\0\u0430\0\u4be6\0\u4c29\0\u4c6c"+
    "\0\u4caf\0\u4cf2\0\u4d35\0\u0430\0\u4d78\0\u0192\0\u4dbb\0\u0430"+
    "\0\u4dfe\0\u0430\0\u4e41\0\u4e84\0\u4ec7\0\u4f0a\0\u4f4d\0\u4f90"+
    "\0\u0430\0\u4fd3\0\u5016\0\u5059\0\u509c\0\u50df\0\u5122\0\u5165"+
    "\0\u51a8\0\u51eb\0\u522e\0\u5271\0\u52b4\0\u52f7\0\u533a\0\u537d"+
    "\0\u53c0\0\u5403\0\u5446\0\u5489\0\u54cc\0\u0430\0\u550f\0\u5552"+
    "\0\u5595\0\u55d8\0\u561b\0\u565e\0\u56a1\0\u56e4\0\u0430\0\u5727"+
    "\0\u576a\0\u57ad\0\u57f0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[443];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\7\1\10\21\7\1\10\1\7\2\10\1\7\1\10"+
    "\1\7\5\10\1\7\1\11\1\12\3\13\1\7\23\10"+
    "\31\7\1\14\20\7\1\15\1\16\3\17\35\7\21\20"+
    "\1\7\17\20\1\21\1\22\1\23\2\17\35\20\1\7"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\24\1\25\1\46\1\25\1\47\1\24"+
    "\1\25\1\24\2\25\1\50\1\25\1\51\1\52\1\53"+
    "\1\54\3\17\1\55\1\25\1\56\1\57\1\25\1\60"+
    "\1\61\1\25\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\25\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\11\106"+
    "\1\107\1\110\26\106\1\53\1\54\40\106\21\111\1\112"+
    "\17\111\1\113\1\16\3\111\1\114\34\111\104\0\2\10"+
    "\4\0\1\10\13\0\2\10\1\0\12\10\7\0\23\10"+
    "\53\0\1\12\103\0\3\13\77\0\1\16\103\0\3\17"+
    "\35\0\21\20\1\0\17\20\2\0\2\20\1\0\35\20"+
    "\42\0\1\22\40\0\21\20\1\0\17\20\2\0\2\23"+
    "\1\17\35\20\1\0\1\24\1\115\7\116\1\117\5\116"+
    "\3\0\1\24\1\115\1\0\2\115\1\24\1\115\1\24"+
    "\3\115\2\120\1\121\6\0\23\115\10\0\1\116\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\23\25"+
    "\10\0\1\25\1\0\1\123\1\25\15\123\3\0\1\123"+
    "\1\25\1\0\2\25\1\123\1\25\1\123\5\25\7\0"+
    "\23\25\10\0\1\123\4\0\1\124\77\0\1\123\1\25"+
    "\2\123\1\125\7\123\1\126\2\123\3\0\1\123\1\25"+
    "\1\0\2\25\1\123\1\25\1\123\5\25\7\0\23\25"+
    "\10\0\1\123\5\0\1\127\76\0\1\130\5\0\2\131"+
    "\12\0\1\130\4\0\1\130\1\0\1\130\5\0\1\132"+
    "\53\0\1\133\1\134\71\0\1\123\1\25\2\123\1\135"+
    "\12\123\3\0\1\123\1\25\1\0\2\25\1\123\1\25"+
    "\1\123\5\25\7\0\23\25\10\0\1\123\1\0\1\123"+
    "\1\25\2\123\1\136\12\123\3\0\1\123\1\25\1\0"+
    "\2\25\1\123\1\25\1\123\5\25\7\0\23\25\10\0"+
    "\1\123\1\0\1\137\1\140\1\141\1\0\1\142\3\0"+
    "\1\141\1\0\5\141\1\143\2\0\1\137\1\140\1\0"+
    "\2\140\1\137\1\140\1\137\5\140\7\0\23\140\10\0"+
    "\1\141\1\0\1\144\1\145\1\146\1\0\1\147\1\150"+
    "\2\151\1\152\1\151\1\152\2\147\2\152\1\153\2\0"+
    "\1\144\1\145\1\0\2\145\1\144\1\145\1\144\5\145"+
    "\7\0\23\145\10\0\1\146\21\154\1\155\1\0\60\154"+
    "\24\0\1\156\1\157\2\160\1\0\1\161\1\0\1\162"+
    "\1\0\1\163\11\0\1\162\1\164\1\165\1\166\1\0"+
    "\1\167\2\0\1\161\12\0\1\170\1\0\1\171\7\0"+
    "\17\25\1\122\2\0\2\25\1\0\11\25\1\172\7\0"+
    "\6\25\1\173\1\174\5\25\1\175\5\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\1\25\1\176"+
    "\10\25\7\0\2\25\1\177\4\25\1\200\13\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\12\25"+
    "\7\0\1\201\2\25\1\202\3\25\1\203\13\25\10\0"+
    "\1\25\1\0\1\204\5\0\2\205\12\0\1\204\4\0"+
    "\1\204\1\0\1\204\5\0\1\206\104\0\1\54\41\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\10\25"+
    "\1\207\10\25\1\210\1\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\1\25\1\211\1\0\12\25\7\0\10\25"+
    "\1\212\4\25\1\213\4\25\1\214\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\11\25\1\215\7\0"+
    "\7\25\1\216\11\25\1\217\1\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\11\25\1\220\7\0"+
    "\23\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\11\25\1\221\7\0\10\25\1\222\4\25\1\223"+
    "\5\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\12\25\7\0\1\25\1\224\21\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\7\25\1\225"+
    "\2\25\7\0\23\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\2\25\1\0\12\25\7\0\15\25\1\226\3\25"+
    "\1\227\1\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\11\25\1\230\7\0\6\25\1\231\1\25"+
    "\1\232\12\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\11\25\1\233\7\0\23\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\12\25\7\0"+
    "\1\25\1\234\1\235\1\236\17\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\1\25\1\237\1\0\7\25\1\240"+
    "\2\25\7\0\7\25\1\241\1\242\12\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\7\25\1\243"+
    "\1\25\1\244\7\0\10\25\1\245\12\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\7\25\1\246"+
    "\2\25\7\0\23\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\2\25\1\0\12\25\7\0\3\25\1\247\1\250"+
    "\16\25\10\0\1\25\12\0\1\251\101\0\1\252\112\0"+
    "\1\253\1\0\2\253\2\0\1\253\5\0\1\253\1\0"+
    "\1\253\6\0\1\253\1\0\3\253\31\0\1\116\1\25"+
    "\15\116\3\0\1\116\1\25\1\0\2\25\1\116\1\25"+
    "\1\116\5\25\7\0\23\25\10\0\1\116\1\0\1\116"+
    "\1\115\15\116\3\0\1\116\1\115\1\0\2\115\1\116"+
    "\1\115\1\116\5\115\7\0\23\115\10\0\1\116\1\0"+
    "\1\254\1\115\15\116\3\0\1\254\1\115\1\0\2\115"+
    "\1\254\1\115\1\254\5\115\7\0\23\115\10\0\1\116"+
    "\1\0\1\254\1\25\4\116\2\255\7\116\3\0\1\254"+
    "\1\25\1\0\2\25\1\254\1\25\1\254\5\25\7\0"+
    "\23\25\10\0\1\116\1\0\1\204\5\0\2\205\12\0"+
    "\1\204\4\0\1\204\1\0\1\204\3\0\2\256\44\0"+
    "\1\137\1\140\1\141\1\0\1\257\1\260\1\0\1\261"+
    "\1\262\1\261\1\262\2\257\2\262\1\263\2\0\1\137"+
    "\1\140\1\0\2\140\1\137\1\140\1\137\5\140\7\0"+
    "\23\140\10\0\1\141\5\0\1\264\76\0\1\130\10\0"+
    "\1\265\10\0\1\130\4\0\1\130\1\0\1\130\3\0"+
    "\2\256\1\121\43\0\1\266\21\0\1\266\4\0\1\266"+
    "\1\0\1\266\51\0\1\204\5\0\2\205\12\0\1\204"+
    "\4\0\1\204\1\0\1\204\50\0\41\134\2\0\40\134"+
    "\1\0\1\137\1\267\15\137\3\0\1\137\1\267\1\0"+
    "\2\267\1\137\1\267\1\137\5\267\7\0\23\267\10\0"+
    "\1\137\1\0\17\140\3\0\2\140\1\0\12\140\7\0"+
    "\23\140\10\0\1\140\1\0\1\141\1\140\15\141\3\0"+
    "\1\141\1\140\1\0\2\140\1\141\1\140\1\141\5\140"+
    "\7\0\23\140\10\0\1\141\1\0\1\144\1\270\15\144"+
    "\3\0\1\144\1\270\1\0\2\270\1\144\1\270\1\144"+
    "\5\270\7\0\23\270\10\0\1\144\1\0\17\145\1\271"+
    "\2\0\2\145\1\0\12\145\7\0\23\145\10\0\1\145"+
    "\1\0\1\146\1\145\15\146\3\0\1\146\1\145\1\0"+
    "\2\145\1\146\1\145\1\146\5\145\7\0\23\145\10\0"+
    "\1\146\1\0\1\146\1\145\2\146\1\152\12\146\1\271"+
    "\2\0\1\146\1\145\1\0\2\145\1\146\1\145\1\146"+
    "\5\145\7\0\23\145\10\0\1\146\5\0\1\272\12\0"+
    "\1\271\102\0\1\271\63\0\1\146\1\145\15\146\1\271"+
    "\2\0\1\146\1\145\1\0\2\145\1\146\1\145\1\146"+
    "\5\145\7\0\23\145\10\0\1\146\5\0\1\151\117\0"+
    "\1\273\101\0\1\154\1\274\2\154\2\0\1\154\5\0"+
    "\1\154\1\0\1\154\10\0\3\154\67\0\1\275\66\0"+
    "\1\276\4\0\1\276\75\0\1\277\4\0\1\277\1\0"+
    "\1\277\51\0\1\300\21\0\1\300\2\0\3\300\1\0"+
    "\1\300\1\0\4\300\11\0\1\300\10\0\1\300\2\0"+
    "\1\300\73\0\1\301\63\0\1\302\102\0\1\303\44\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\7\25"+
    "\1\304\4\25\1\305\6\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\10\25\1\306"+
    "\12\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\12\25\7\0\3\25\1\307\17\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\12\25\7\0"+
    "\10\25\1\310\12\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\2\25\1\0\12\25\7\0\1\25\1\311\21\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\12\25\7\0\7\25\1\312\13\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\16\25"+
    "\1\313\1\314\3\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\2\25\1\0\12\25\7\0\13\25\1\315\7\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\12\25\7\0\4\25\1\316\16\25\10\0\1\25\1\0"+
    "\1\204\21\0\1\204\4\0\1\204\1\0\1\204\3\0"+
    "\2\256\44\0\1\204\21\0\1\204\4\0\1\204\1\0"+
    "\1\204\110\0\1\317\43\0\17\25\1\122\2\0\2\25"+
    "\1\0\11\25\1\320\7\0\23\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\10\25"+
    "\1\321\12\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\1\25\1\322\1\0\12\25\7\0\23\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\12\25\7\0"+
    "\3\25\1\323\17\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\2\25\1\0\12\25\7\0\3\25\1\324\17\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\12\25\7\0\7\25\1\325\13\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\10\25"+
    "\1\326\12\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\7\25\1\327\2\25\7\0\23\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\12\25"+
    "\7\0\6\25\1\330\14\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\1\25\1\331"+
    "\21\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\12\25\7\0\16\25\1\332\4\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\1\25\1\333"+
    "\10\25\7\0\23\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\2\25\1\0\12\25\7\0\21\25\1\334\1\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\1\25\1\335"+
    "\1\0\12\25\7\0\23\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\1\25\1\336"+
    "\21\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\11\25\1\337\7\0\15\25\1\340\5\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\12\25"+
    "\7\0\2\25\1\341\20\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\3\25\1\342"+
    "\17\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\12\25\7\0\20\25\1\343\2\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\12\25\7\0"+
    "\3\25\1\344\17\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\2\25\1\0\11\25\1\345\7\0\23\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\11\25"+
    "\1\346\7\0\23\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\2\25\1\0\12\25\7\0\4\25\1\347\16\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\7\25\1\350\1\25\1\351\7\0\23\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\12\25\7\0"+
    "\3\25\1\352\13\25\1\353\3\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\16\25"+
    "\1\354\4\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\12\25\7\0\1\25\1\355\21\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\12\25"+
    "\7\0\13\25\1\356\7\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\3\25\1\357"+
    "\17\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\12\25\7\0\1\25\1\360\5\25\1\361\13\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\11\25\1\362\7\0\15\25\1\363\5\25\10\0\1\25"+
    "\1\0\1\254\1\115\4\116\2\117\7\116\3\0\1\254"+
    "\1\115\1\0\2\115\1\254\1\115\1\254\5\115\7\0"+
    "\23\115\10\0\1\116\1\0\1\364\5\0\2\365\12\0"+
    "\1\364\4\0\1\364\1\0\1\364\51\0\1\141\1\140"+
    "\2\141\1\262\12\141\3\0\1\141\1\140\1\0\2\140"+
    "\1\141\1\140\1\141\5\140\7\0\23\140\10\0\1\141"+
    "\5\0\1\366\102\0\1\261\76\0\1\364\21\0\1\364"+
    "\4\0\1\364\1\0\1\364\51\0\1\266\21\0\1\266"+
    "\4\0\1\266\1\0\1\266\3\0\2\256\1\121\43\0"+
    "\1\137\1\140\15\137\3\0\1\137\1\140\1\0\2\140"+
    "\1\137\1\140\1\137\5\140\7\0\23\140\10\0\1\137"+
    "\1\0\1\144\1\145\15\144\3\0\1\144\1\145\1\0"+
    "\2\145\1\144\1\145\1\144\5\145\7\0\23\145\10\0"+
    "\1\144\5\0\1\151\12\0\1\271\135\0\1\367\105\0"+
    "\1\370\73\0\1\371\110\0\1\372\26\0\17\25\1\122"+
    "\2\0\2\25\1\0\12\25\7\0\10\25\1\373\12\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\12\25\7\0\15\25\1\374\5\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\16\25"+
    "\1\375\4\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\12\25\7\0\13\25\1\376\7\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\12\25"+
    "\7\0\11\25\1\377\11\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\11\25\1\u0100\7\0\23\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\11\25\1\u0101\7\0\23\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\10\25\1\u0102"+
    "\12\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\11\25\1\u0103\7\0\23\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\3\25"+
    "\1\u0104\17\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\12\25\7\0\20\25\1\u0105\2\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\7\25"+
    "\1\u0106\2\25\7\0\23\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\16\25\1\u0107"+
    "\4\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\11\25\1\u0108\7\0\23\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\1\25"+
    "\1\u0109\21\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\1\25\1\u010a\1\0\12\25\7\0\23\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\11\25\1\u010b"+
    "\7\0\23\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\7\25\1\u010c\2\25\7\0\23\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\1\25\1\u010d\1\0"+
    "\12\25\7\0\23\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\2\25\1\0\11\25\1\u010e\7\0\23\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\12\25"+
    "\7\0\15\25\1\u010f\5\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\21\25\1\u0110"+
    "\1\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\12\25\7\0\3\25\1\u0111\17\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\12\25\7\0"+
    "\7\25\1\u0112\13\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\2\25\1\0\12\25\7\0\15\25\1\u0113\5\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\7\25\1\u0114\2\25\7\0\23\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\7\25\1\u0115\2\25"+
    "\7\0\23\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\11\25\1\u0116\7\0\23\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\1\25\1\u0117\1\0\12\25"+
    "\7\0\23\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\7\25\1\u0118\2\25\7\0\23\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\11\25"+
    "\1\u0119\7\0\23\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\2\25\1\0\12\25\7\0\4\25\1\u011a\16\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\7\25\1\u011b\2\25\7\0\23\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\4\25"+
    "\1\u011c\16\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\12\25\7\0\6\25\1\u011d\14\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\1\25\1\u011e\1\0"+
    "\12\25\7\0\23\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\2\25\1\0\12\25\7\0\21\25\1\u011f\1\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\12\25\7\0\22\25\1\u0120\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\13\25\1\u0121"+
    "\7\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\12\25\7\0\15\25\1\u0122\5\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\11\25\1\u0123"+
    "\7\0\23\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\12\25\7\0\3\25\1\u0124\17\25\10\0"+
    "\1\25\1\0\1\364\5\0\2\265\12\0\1\364\4\0"+
    "\1\364\1\0\1\364\120\0\1\u0125\41\0\1\u0126\143\0"+
    "\1\u0127\33\0\17\25\1\122\2\0\2\25\1\0\12\25"+
    "\7\0\12\25\1\u0128\10\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\3\25\1\u0129"+
    "\17\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\12\25\7\0\5\25\1\u012a\15\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\11\25\1\u012b"+
    "\7\0\23\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\1\25\1\u012c\1\0\12\25\7\0\23\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\12\25\7\0"+
    "\17\25\1\u012d\3\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\1\25\1\u012e\1\0\12\25\7\0\23\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\12\25"+
    "\7\0\15\25\1\u012f\5\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\7\25\1\u0130"+
    "\13\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\12\25\7\0\1\25\1\u0131\21\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\12\25\7\0"+
    "\16\25\1\u0132\4\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\2\25\1\0\11\25\1\u0133\7\0\23\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\12\25"+
    "\7\0\13\25\1\u0134\7\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\7\25\1\u0135"+
    "\13\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\7\25\1\u0136\2\25\7\0\23\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\1\25\1\u0137\1\0\12\25"+
    "\7\0\23\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\7\25\1\u0138\2\25\7\0\23\25\10\0"+
    "\1\25\1\0\6\25\1\u0139\10\25\1\122\2\0\2\25"+
    "\1\0\12\25\7\0\23\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\11\25\1\u013a\7\0\23\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\12\25\7\0\3\25\1\u013b\17\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\20\25"+
    "\1\u013c\2\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\12\25\7\0\15\25\1\u013d\5\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\1\25\1\u013e\1\0"+
    "\12\25\7\0\23\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\2\25\1\0\7\25\1\u013f\2\25\7\0\23\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\12\25\7\0\1\25\1\u0140\21\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\4\25"+
    "\1\u0141\16\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\12\25\7\0\3\25\1\u0142\17\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\12\25"+
    "\7\0\1\25\1\u0143\21\25\10\0\1\25\1\0\6\25"+
    "\1\u0144\10\25\1\122\2\0\2\25\1\0\12\25\7\0"+
    "\23\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\12\25\7\0\10\25\1\u0145\12\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\12\25\7\0"+
    "\10\25\1\u0146\12\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\2\25\1\0\12\25\7\0\7\25\1\u0147\13\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\12\25\7\0\7\25\1\u0148\13\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\7\25"+
    "\1\u0149\13\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\12\25\7\0\4\25\1\u014a\16\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\12\25"+
    "\7\0\14\25\1\u014b\6\25\10\0\1\25\54\0\1\u014c"+
    "\27\0\17\25\1\122\2\0\2\25\1\0\12\25\7\0"+
    "\12\25\1\u014d\10\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\2\25\1\0\12\25\7\0\1\25\1\u014e\21\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\12\25\7\0\1\25\1\u014f\21\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\2\25"+
    "\1\u0150\20\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\12\25\7\0\7\25\1\u0151\13\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\12\25"+
    "\7\0\15\25\1\u0152\5\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\1\25\1\u0153"+
    "\21\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\12\25\7\0\13\25\1\u0154\7\25\10\0\1\25"+
    "\1\0\6\25\1\u0155\10\25\1\122\2\0\2\25\1\0"+
    "\12\25\7\0\23\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\1\25\1\u0156\1\0\12\25\7\0\23\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\12\25"+
    "\7\0\12\25\1\u0157\10\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\1\25\1\u0158\10\25\7\0"+
    "\23\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\12\25\7\0\4\25\1\u0159\2\25\1\u015a\1\u015b"+
    "\12\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\11\25\1\u015c\7\0\23\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\15\25"+
    "\1\u015d\5\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\12\25\7\0\3\25\1\u015e\17\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\12\25"+
    "\7\0\15\25\1\u015f\5\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\1\25\1\u0160"+
    "\21\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\11\25\1\u0161\7\0\23\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\22\25"+
    "\1\u0162\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\7\25\1\u0163\2\25\7\0\23\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\12\25\7\0"+
    "\13\25\1\u0164\7\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\2\25\1\0\12\25\7\0\13\25\1\u0165\7\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\11\25\1\u0166\7\0\23\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\11\25\1\u0167\7\0\23\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\12\25\7\0\4\25\1\u0168\16\25\10\0\1\25\37\0"+
    "\1\u0169\44\0\17\25\1\122\2\0\2\25\1\0\7\25"+
    "\1\u016a\2\25\7\0\23\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\15\25\1\u016b"+
    "\5\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\12\25\7\0\6\25\1\u016c\14\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\12\25\7\0"+
    "\10\25\1\u016d\12\25\10\0\1\25\1\0\6\25\1\u016e"+
    "\10\25\1\122\2\0\2\25\1\0\12\25\7\0\23\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\1\25\1\u016f\10\25\7\0\23\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\6\25"+
    "\1\u0170\14\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\12\25\7\0\15\25\1\u0171\5\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\12\25"+
    "\7\0\7\25\1\u0172\13\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\1\25\1\u0173"+
    "\6\25\1\u0174\12\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\2\25\1\0\12\25\7\0\10\25\1\u0175\12\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\12\25\7\0\17\25\1\u0176\2\25\1\u0177\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\12\25\7\0"+
    "\16\25\1\u0178\4\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\2\25\1\0\12\25\7\0\16\25\1\u0179\4\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\11\25\1\376\7\0\23\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\17\25\1\u017a"+
    "\3\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\12\25\7\0\3\25\1\u017b\17\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\12\25\7\0"+
    "\10\25\1\u017c\12\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\1\25\1\u017d\1\0\12\25\7\0\23\25\10\0"+
    "\1\25\55\0\1\u017e\26\0\17\25\1\122\2\0\1\25"+
    "\1\u017f\1\0\12\25\7\0\23\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\10\25"+
    "\1\u0180\12\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\12\25\7\0\3\25\1\u0181\17\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\12\25"+
    "\7\0\4\25\1\u0182\16\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\6\25\1\u0183"+
    "\14\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\12\25\7\0\4\25\1\u0184\16\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\11\25\1\u0185"+
    "\7\0\23\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\12\25\7\0\10\25\1\u0186\12\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\12\25"+
    "\7\0\16\25\1\u0187\4\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\16\25\1\u0188"+
    "\4\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\11\25\1\u0189\7\0\23\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\1\25"+
    "\1\u018a\21\25\10\0\1\25\1\0\6\25\1\u018b\10\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\23\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\12\25"+
    "\7\0\1\25\1\u018c\21\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\12\25\1\u018d"+
    "\10\25\10\0\1\25\53\0\1\u018e\30\0\17\25\1\122"+
    "\2\0\2\25\1\0\12\25\7\0\13\25\1\u018f\7\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\12\25\7\0\3\25\1\u0190\17\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\6\25"+
    "\1\u0191\14\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\11\25\1\u0192\7\0\23\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\1\25\1\u0193\1\0\12\25"+
    "\7\0\23\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\12\25\7\0\5\25\1\u0194\15\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\12\25"+
    "\7\0\5\25\1\376\15\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\3\25\1\u0195"+
    "\17\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\12\25\7\0\17\25\1\u0196\3\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\1\25\1\u0197"+
    "\10\25\7\0\23\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\2\25\1\0\12\25\7\0\3\25\1\u0198\17\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\12\25\7\0\4\25\1\u0199\16\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\20\25"+
    "\1\u019a\2\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\7\25\1\u019b\2\25\7\0\23\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\11\25"+
    "\1\u019c\7\0\23\25\10\0\1\25\1\0\6\25\1\u019d"+
    "\10\25\1\122\2\0\2\25\1\0\12\25\7\0\23\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\12\25\7\0\22\25\1\u019e\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\15\25\1\175"+
    "\5\25\10\0\1\25\1\0\6\25\1\u019f\10\25\1\122"+
    "\2\0\2\25\1\0\12\25\7\0\23\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\1\25\1\u01a0"+
    "\10\25\7\0\23\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\2\25\1\0\12\25\7\0\14\25\1\u0160\6\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\12\25\7\0\1\25\1\u01a1\21\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\2\25"+
    "\1\u01a2\20\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\12\25\7\0\1\25\1\u01a3\21\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\12\25"+
    "\7\0\20\25\1\u01a4\2\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\10\25\1\u01a5"+
    "\12\25\10\0\1\25\1\0\6\25\1\u01a6\10\25\1\122"+
    "\2\0\2\25\1\0\12\25\7\0\23\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\12\25\7\0"+
    "\15\25\1\u01a7\5\25\10\0\1\25\1\0\6\25\1\u01a8"+
    "\10\25\1\122\2\0\2\25\1\0\12\25\7\0\23\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\11\25\1\u01a9\7\0\23\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\7\25\1\u01aa"+
    "\13\25\10\0\1\25\1\0\17\25\1\122\2\0\2\25"+
    "\1\0\12\25\7\0\1\25\1\u01ab\21\25\10\0\1\25"+
    "\1\0\17\25\1\122\2\0\2\25\1\0\12\25\7\0"+
    "\7\25\1\u0160\13\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\2\25\1\0\12\25\7\0\1\25\1\u01ac\21\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\12\25\7\0\1\25\1\u01ad\21\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\4\25"+
    "\1\u01ae\16\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\12\25\7\0\21\25\1\u01af\1\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\12\25"+
    "\7\0\10\25\1\u01b0\12\25\10\0\1\25\1\0\17\25"+
    "\1\122\2\0\2\25\1\0\12\25\7\0\21\25\1\u01b1"+
    "\1\25\10\0\1\25\1\0\17\25\1\122\2\0\1\25"+
    "\1\u01b2\1\0\12\25\7\0\23\25\10\0\1\25\1\0"+
    "\6\25\1\u01b3\10\25\1\122\2\0\2\25\1\0\12\25"+
    "\7\0\23\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\12\25\7\0\10\25\1\u01b4\12\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\2\25\1\0\11\25"+
    "\1\u01b5\7\0\23\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\2\25\1\0\12\25\7\0\4\25\1\u01b6\16\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\12\25\7\0\13\25\1\u01b7\7\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\7\25\1\307\2\25"+
    "\7\0\23\25\10\0\1\25\1\0\17\25\1\122\2\0"+
    "\2\25\1\0\12\25\7\0\1\25\1\u01b8\21\25\10\0"+
    "\1\25\1\0\17\25\1\122\2\0\1\25\1\u01b9\1\0"+
    "\12\25\7\0\23\25\10\0\1\25\1\0\17\25\1\122"+
    "\2\0\2\25\1\0\12\25\7\0\15\25\1\u01ba\5\25"+
    "\10\0\1\25\1\0\17\25\1\122\2\0\2\25\1\0"+
    "\12\25\7\0\3\25\1\u01bb\17\25\10\0\1\25\1\0"+
    "\17\25\1\122\2\0\2\25\1\0\12\25\7\0\14\25"+
    "\1\376\6\25\10\0\1\25";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22579];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\3\1\1\11\31\1\2\11\17\1\10\11\1\1\1\11"+
    "\2\1\1\11\2\1\1\11\4\0\2\1\1\0\1\11"+
    "\4\1\2\0\1\11\3\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\0\1\1\1\0\4\1\4\0\1\11\4\0"+
    "\2\11\2\0\2\11\13\1\2\0\42\1\3\11\1\1"+
    "\2\0\1\1\1\0\1\11\1\1\1\0\1\11\5\0"+
    "\1\1\1\11\1\1\1\0\3\1\3\0\13\1\1\11"+
    "\45\1\1\0\1\1\3\0\1\11\52\1\1\11\1\0"+
    "\1\11\44\1\1\0\34\1\1\0\24\1\1\0\17\1"+
    "\1\11\55\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[443];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    int commentLevel = 0;


  _DylanLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _DylanLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 33: 
          { return DylanTypes.RBRACE;
          }
        case 117: break;
        case 96: 
          { return DylanTypes.DEFINE;
          }
        case 118: break;
        case 31: 
          { return DylanTypes.RBRACKET;
          }
        case 119: break;
        case 32: 
          { return DylanTypes.LBRACE;
          }
        case 120: break;
        case 22: 
          { return DylanTypes.AMPERSAND;
          }
        case 121: break;
        case 56: 
          { return DylanTypes.HASH_PAREN;
          }
        case 122: break;
        case 95: 
          { return DylanTypes.SELECT;
          }
        case 123: break;
        case 72: 
          { return DylanTypes.USE;
          }
        case 124: break;
        case 108: 
          { return DylanTypes.KEYED_BY;
          }
        case 125: break;
        case 14: 
          { return DylanTypes.TILDE;
          }
        case 126: break;
        case 116: 
          { return DylanTypes.COPY_DOWN_METHOD;
          }
        case 127: break;
        case 98: 
          { return DylanTypes.CREATE;
          }
        case 128: break;
        case 27: 
          { yybegin(STRING); return DylanTypes.STRING_CHARACTER;
          }
        case 129: break;
        case 57: 
          { return DylanTypes.HASH_BRACKET;
          }
        case 130: break;
        case 6: 
          { yybegin(DYLAN_CODE); return DylanTypes.CRLF;
          }
        case 131: break;
        case 18: 
          { return DylanTypes.SLASH;
          }
        case 132: break;
        case 74: 
          { return DylanTypes.NONDEFINING_BEGIN_WORD;
          }
        case 133: break;
        case 36: 
          { return DylanTypes.VARIABLE_IGNORE;
          }
        case 134: break;
        case 60: 
          { return DylanTypes.IF;
          }
        case 135: break;
        case 23: 
          { return DylanTypes.VERT_BAR;
          }
        case 136: break;
        case 77: 
          { return DylanTypes.FROM;
          }
        case 137: break;
        case 113: 
          { return DylanTypes.OTHERWISE;
          }
        case 138: break;
        case 82: 
          { return DylanTypes.HASH_NEXT;
          }
        case 139: break;
        case 2: 
          { yybegin(WAITING_SEPARATOR); return DylanTypes.KEY;
          }
        case 140: break;
        case 91: 
          { return DylanTypes.UNTIL;
          }
        case 141: break;
        case 66: 
          { return DylanTypes.CHARACTER_LITERAL;
          }
        case 142: break;
        case 15: 
          { return DylanTypes.MINUS;
          }
        case 143: break;
        case 29: 
          { return DylanTypes.RPAREN;
          }
        case 144: break;
        case 30: 
          { return DylanTypes.LBRACKET;
          }
        case 145: break;
        case 51: 
          { return DylanTypes.ESCAPED_WORD;
          }
        case 146: break;
        case 37: 
          { return DylanTypes.COMMENT;
          }
        case 147: break;
        case 38: 
          { return DylanTypes.STRING_CHARACTER;
          }
        case 148: break;
        case 84: 
          { return DylanTypes.BEGIN;
          }
        case 149: break;
        case 58: 
          { return DylanTypes.BY;
          }
        case 150: break;
        case 112: 
          { return DylanTypes.EXCEPTION;
          }
        case 151: break;
        case 25: 
          { return DylanTypes.DOT;
          }
        case 152: break;
        case 49: 
          { return DylanTypes.COLON_EQUAL;
          }
        case 153: break;
        case 4: 
          { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
          }
        case 154: break;
        case 53: 
          { return DylanTypes.HASH_HASH;
          }
        case 155: break;
        case 54: 
          { return DylanTypes.HASH_T;
          }
        case 156: break;
        case 7: 
          { return TokenType.WHITE_SPACE;
          }
        case 157: break;
        case 59: 
          { return DylanTypes.TO;
          }
        case 158: break;
        case 21: 
          { return DylanTypes.GREATER_THAN;
          }
        case 159: break;
        case 75: 
          { return DylanTypes.ELSE;
          }
        case 160: break;
        case 48: 
          { return DylanTypes.CONSTRAINED_NAME;
          }
        case 161: break;
        case 50: 
          { return DylanTypes.COLON_COLON;
          }
        case 162: break;
        case 28: 
          { return DylanTypes.LPAREN;
          }
        case 163: break;
        case 17: 
          { return DylanTypes.STAR;
          }
        case 164: break;
        case 8: 
          { return DylanTypes.VALUE;
          }
        case 165: break;
        case 64: 
          { return DylanTypes.STRING_ESCAPE_CHARACTER;
          }
        case 166: break;
        case 76: 
          { return DylanTypes.THEN;
          }
        case 167: break;
        case 78: 
          { return DylanTypes.SLOT;
          }
        case 168: break;
        case 62: 
          { commentLevel--; if (commentLevel == 0) { yybegin(DYLAN_CODE);} return DylanTypes.COMMENT;
          }
        case 169: break;
        case 88: 
          { return DylanTypes.WHILE;
          }
        case 170: break;
        case 13: 
          { return DylanTypes.EQUAL;
          }
        case 171: break;
        case 105: 
          { return DylanTypes.CLEANUP;
          }
        case 172: break;
        case 87: 
          { return DylanTypes.LOCAL;
          }
        case 173: break;
        case 40: 
          { return DylanTypes.KEYWORD;
          }
        case 174: break;
        case 106: 
          { return DylanTypes.HANDLER_T;
          }
        case 175: break;
        case 94: 
          { return DylanTypes.ELSEIF;
          }
        case 176: break;
        case 80: 
          { return DylanTypes.CASE;
          }
        case 177: break;
        case 10: 
          { return DylanTypes.NUMBER;
          }
        case 178: break;
        case 109: 
          { return DylanTypes.VARIABLE_T;
          }
        case 179: break;
        case 12: 
          { return DylanTypes.QUERY;
          }
        case 180: break;
        case 5: 
          { yybegin(WAITING_VALUE); return DylanTypes.HEADER_SEPARATOR;
          }
        case 181: break;
        case 102: 
          { return DylanTypes.FINALLY;
          }
        case 182: break;
        case 81: 
          { return DylanTypes.HASH_REST;
          }
        case 183: break;
        case 11: 
          { return DylanTypes.NONDEFINING_NONEXPRESSION_WORD;
          }
        case 184: break;
        case 55: 
          { return DylanTypes.HASH_F;
          }
        case 185: break;
        case 93: 
          { return DylanTypes.EXPORT;
          }
        case 186: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 187: break;
        case 114: 
          { return DylanTypes.AFTERWARDS;
          }
        case 188: break;
        case 73: 
          { return DylanTypes.HASH_KEY;
          }
        case 189: break;
        case 19: 
          { return DylanTypes.CARET;
          }
        case 190: break;
        case 67: 
          { return DylanTypes.ALL;
          }
        case 191: break;
        case 9: 
          { yybegin(YYINITIAL); return DylanTypes.CRLF;
          }
        case 192: break;
        case 92: 
          { return DylanTypes.USING;
          }
        case 193: break;
        case 44: 
          { return DylanTypes.TILDE_EQUAL;
          }
        case 194: break;
        case 45: 
          { yybegin(COMMENT_BLOCK); commentLevel++; return DylanTypes.COMMENT;
          }
        case 195: break;
        case 90: 
          { return DylanTypes.MACRO_T;
          }
        case 196: break;
        case 70: 
          { return DylanTypes.FOR;
          }
        case 197: break;
        case 34: 
          { return DylanTypes.COMMA;
          }
        case 198: break;
        case 69: 
          { return DylanTypes.ELLIPSIS;
          }
        case 199: break;
        case 43: 
          { return DylanTypes.EQUAL_ARROW;
          }
        case 200: break;
        case 107: 
          { return DylanTypes.FUNCTION;
          }
        case 201: break;
        case 26: 
          { /* return DylanTypes.CRLF; */
          }
        case 202: break;
        case 110: 
          { return DylanTypes.CONSTANT_T;
          }
        case 203: break;
        case 101: 
          { return DylanTypes.UNLESS;
          }
        case 204: break;
        case 83: 
          { return DylanTypes.BELOW;
          }
        case 205: break;
        case 97: 
          { return DylanTypes.DOMAIN;
          }
        case 206: break;
        case 35: 
          { return DylanTypes.SEMICOLON;
          }
        case 207: break;
        case 63: 
          { commentLevel++; yybegin(COMMENT_BLOCK); return DylanTypes.COMMENT;
          }
        case 208: break;
        case 115: 
          { return DylanTypes.SHARED_SYMBOLS_T;
          }
        case 209: break;
        case 103: 
          { return DylanTypes.LIBRARY;
          }
        case 210: break;
        case 42: 
          { return DylanTypes.EQUAL_EQUAL;
          }
        case 211: break;
        case 89: 
          { return DylanTypes.CLASS;
          }
        case 212: break;
        case 71: 
          { return DylanTypes.LET;
          }
        case 213: break;
        case 104: 
          { return DylanTypes.GENERIC;
          }
        case 214: break;
        case 100: 
          { return DylanTypes.MODULE;
          }
        case 215: break;
        case 85: 
          { return DylanTypes.BLOCK;
          }
        case 216: break;
        case 79: 
          { return DylanTypes.WHEN;
          }
        case 217: break;
        case 20: 
          { return DylanTypes.LESS_THAN;
          }
        case 218: break;
        case 61: 
          { return DylanTypes.IN;
          }
        case 219: break;
        case 65: 
          { return DylanTypes.TILDE_EQUAL_EQUAL;
          }
        case 220: break;
        case 39: 
          { yybegin(DYLAN_CODE); return DylanTypes.STRING_CHARACTER;
          }
        case 221: break;
        case 47: 
          { return DylanTypes.GREATER_THAN_EQUAL;
          }
        case 222: break;
        case 41: 
          { return DylanTypes.QUERY_QUERY;
          }
        case 223: break;
        case 86: 
          { return DylanTypes.ABOVE;
          }
        case 224: break;
        case 46: 
          { return DylanTypes.LESS_THAN_EQUAL;
          }
        case 225: break;
        case 3: 
          { yybegin(DYLAN_CODE); return TokenType.WHITE_SPACE;
          }
        case 226: break;
        case 16: 
          { return DylanTypes.PLUS;
          }
        case 227: break;
        case 68: 
          { return DylanTypes.END;
          }
        case 228: break;
        case 99: 
          { return DylanTypes.METHOD;
          }
        case 229: break;
        case 111: 
          { return DylanTypes.HASH_ALL_KEYS;
          }
        case 230: break;
        case 52: 
          { return DylanTypes.OPERATOR_NAME;
          }
        case 231: break;
        case 24: 
          { return DylanTypes.HASH;
          }
        case 232: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
