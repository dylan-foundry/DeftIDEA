{
  parserClass="org.dylanfoundry.deft.filetypes.dylan.parser.DylanParser"
  parserUtilClass="org.dylanfoundry.deft.filetypes.dylan.DylanParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
 
  psiClassPrefix="Dylan"
  psiImplClassSuffix="Impl"
  psiPackage="org.dylanfoundry.deft.filetypes.dylan.psi"
  psiImplPackage="org.dylanfoundry.deft.filetypes.dylan.psi.impl"
 
  elementTypeHolderClass="org.dylanfoundry.deft.filetypes.dylan.psi.DylanTypes"
  elementTypeClass="org.dylanfoundry.deft.filetypes.dylan.psi.DylanElementType"
  tokenTypeClass="org.dylanfoundry.deft.filetypes.dylan.psi.DylanTokenType"

  psiImplUtilClass="org.dylanfoundry.deft.filetypes.dylan.psi.impl.DylanPsiImplUtil"

  // Support for Pratt-style left-recursive expressions
  extends(".*_expr|expression")=expression

  extends("definition.*definer|definition_macro_call|definition")=definition
  extends(".*slot_option|slot_option")=slot_option
  extends(".*_statement|statement")=statement
  extends(".*_suite_component|suite_component")=suite_component
}
 
dylanFile ::= headers source_records?

headers ::= header*

header ::= (KEY HEADER_SEPARATOR header_values) {methods=[getKey]}

header_values ::= CRLF | (VALUE CRLF)+ {methods=[getValues]}

//source_records ::= source_record | variable | expression | name | token | body? | case_body? | macro
source_records ::= source_record | variable | expression | word_name | token | case_body | macro

token ::= word_name | symbol | NUMBER | CHARACTER_LITERAL | string | operator | punctuation | hash_word

string ::= (STRING_CHARACTER|STRING_ESCAPE_CHARACTER)+

unique_string ::= UNIQUE_STRING_CHARACTER+

symbol ::= unique_string | KEYWORD

punctuation ::= bracketing_punctuation | non_bracketing_punctuation

bracketing_punctuation ::= LPAREN | RPAREN | LBRACKET | RBRACKET | LBRACE | RBRACE | HASH_PAREN | HASH_BRACKET

non_bracketing_punctuation ::=
      COMMA
    | DOT
    | SEMICOLON
    | COLON_COLON
    | MINUS
    | EQUAL
    | EQUAL_EQUAL
    | EQUAL_ARROW
    | HASH_HASH
    | QUERY
    | QUERY_QUERY
    | QUERY_EQUAL
    | ELLIPSIS

core_word ::= non_end_core_word | END

non_end_core_word ::= DEFINE | HANDLER_T | LET | LOCAL | MACRO_T | OTHERWISE

nondefining_begin_word_token ::= BEGIN | BLOCK | CASE | FOR | IF | METHOD | SELECT | UNLESS | UNTIL | WHILE

nondefining_word ::= NONDEFINING_BEGIN_WORD | NONDEFINING_FUNCTION_WORD | NONDEFINING_NONEXPRESSION_WORD

define_body_word ::= DEFINE_BODY_NONEXPRESSION_WORD | DEFINE_BODY_BEGIN_WORD | DEFINE_BODY_FUNCTION_WORD

define_list_word ::= DEFINE_LIST_NONEXPRESSION_WORD | DEFINE_LIST_BEGIN_WORD | DEFINE_LIST_FUNCTION_WORD

private nonexpression_word ::= NONDEFINING_NONEXPRESSION_WORD | DEFINE_BODY_NONEXPRESSION_WORD | DEFINE_LIST_NONEXPRESSION_WORD | FUNCTION | CLASS | DOMAIN | LIBRARY | MODULE | GENERIC | SUITE | TEST

begin_word ::= NONDEFINING_BEGIN_WORD | DEFINE_BODY_BEGIN_WORD | DEFINE_LIST_BEGIN_WORD | METHOD

function_word ::= NONDEFINING_FUNCTION_WORD | DEFINE_BODY_FUNCTION_WORD | DEFINE_LIST_FUNCTION_WORD

reserved_word ::= core_word | NONDEFINING_FUNCTION_WORD | NONDEFINING_BEGIN_WORD | define_body_word | define_list_word

unreserved_word ::= NONDEFINING_NONEXPRESSION_WORD

escaped_name ::= ESCAPED_WORD | OPERATOR_NAME

// Tokens that are also unreserved_names
dylan_unreserved_name ::=
      ABOVE
    | AFTERWARDS
    | ALL
    | BELOW
    | BY
    | COPY_DOWN_METHOD
    | CLEANUP
    | CREATE
    | EXPORT
    | FINALLY
    | FROM
    | IN
    | KEYED_BY
    | THEN
    | TO
    | USE
    | USING
    | CLASS
    | DOMAIN
    | EXCEPTION
    | FUNCTION
    | GENERIC
    | LIBRARY
    | METHOD
    | MODULE
    | SHARED_SYMBOLS_T
    | SLOT
    | SUITE
    | TEST
    | VARIABLE_T

unreserved_name ::= unreserved_word | escaped_name | dylan_unreserved_name

word_name ::= reserved_word | unreserved_name

nondefining_name ::= nondefining_word | escaped_name

ordinary_binding_name ::= ordinary_name

private ordinary_name ::= nonexpression_word | escaped_name

macro_name ::= nondefining_name | define_body_word | define_list_word

name_not_end ::= macro_name | non_end_core_word | dylan_unreserved_name

hash_word ::= HASH_T | HASH_F | HASH_NEXT | HASH_REST | HASH_KEY | HASH_ALL_KEYS | HASH_INCLUDE

operator ::=
      TILDE | PLUS | MINUS | STAR | SLASH | CARET
    | EQUAL | EQUAL_EQUAL | TILDE_EQUAL | TILDE_EQUAL_EQUAL
    | LESS_THAN | LESS_THAN_EQUAL | GREATER_THAN | GREATER_THAN_EQUAL
    | AMPERSAND | VERT_BAR | COLON_EQUAL

binary_operator_only ::= PLUS | STAR | SLASH | CARET | EQUAL | EQUAL_EQUAL | TILDE_EQUAL | TILDE_EQUAL_EQUAL
                       | LESS_THAN | LESS_THAN_EQUAL | GREATER_THAN | GREATER_THAN_EQUAL | AMPERSAND | VERT_BAR
                       | COLON_EQUAL

unary_operator_only ::= MINUS | TILDE
unary_and_binary_operator ::= MINUS
binary_operator ::=  binary_operator_only | unary_and_binary_operator

/* Program Structure, page 420 */

// FIXME: original is body?
private source_record ::= body

body ::= constituents SEMICOLON?
  {
    recoverUntil="body_recovery"
  }

private constituents ::= constituent (SEMICOLON constituent)* | COMMENT

// Every token / expression that can follow a body
// If you add a rule that follow a body you need to add it here!
private body_recovery ::= !(function_definition_tail | method_definition_tail | test_definition_tail | END
    | afterwards_statement | block_tail | cleanup_statement | exception_statement | finally_clause | for_statement_tail
    | elseif_statement | else_statement | if_tail | method_tail | unless_tail | until_tail | when_tail | while_tail
    | method_definition_tail)

private constituent ::= definition | local_declaration | expression

macro ::= definition_macro_call | statement | function_macro_call | PARSED_MACRO_CALL

/* Property Lists, page 420 */

property_list ::= property (COMMA property)*

property ::= symbol symbol_value

symbol_value ::= basic_fragment

/* Fragments, page 421-422 */

body_fragment ::= statement non_statement_body_fragment? | non_statement_body_fragment

list_fragment ::= statement non_statement_list_fragment? | non_statement_list_fragment

basic_fragment ::= statement non_statement_basic_fragment? | non_statement_basic_fragment

private non_statement_body_fragment ::=
      definition semicolon_fragment?
    | local_declaration semicolon_fragment?
    | simple_fragment body_fragment?
    | COMMA body_fragment?
    | semicolon_fragment?

semicolon_fragment ::= SEMICOLON body_fragment?

private non_statement_list_fragment ::= simple_fragment list_fragment? | COMMA list_fragment?

non_statement_basic_fragment ::= simple_fragment basic_fragment?

private simple_fragment ::=
      function_macro_call
    | variable_name
    | constant_fragment
    | operator
    | bracketed_fragment
    | hash_word
    | DOT
    | COLON_COLON
    | EQUAL_ARROW
    | QUERY
    | QUERY_QUERY
    | QUERY_EQUAL
    | ELLIPSIS
    | HASH_HASH
    | OTHERWISE
    | PARSED_FUNCTION_CALL
    | PARSED_MACRO_CALL

bracketed_fragment ::=
      LPAREN bracketed_fragment_body? RPAREN
    | LBRACKET bracketed_fragment_body? RBRACKET
    | LBRACE bracketed_fragment_body? RBRACE

private bracketed_fragment_body ::= body_fragment
  {
    recoverUntil="bracketed_fragment_recovery"
  }

private bracketed_fragment_recovery ::= !(RPAREN | RBRACKET | RBRACE)

constant_fragment ::=
      NUMBER
    | CHARACTER_LITERAL
    | string
    | symbol
    | HASH_PAREN constants DOT constant RPAREN
    | HASH_PAREN constants? RPAREN
    | HASH_BRACKET constants? RBRACKET
    | PARSED_LIST_CONSTANT
    | PARSED_VECTOR_CONSTANT

/* Definitions, page 422 */

definition ::=
      definition_class_definer
    | definition_constant_definer
    | definition_copy_down_method_definer
    | definition_domain_definer
    | definition_function_definer
    | definition_generic_definer
    | definition_library_definer
    | definition_module_definer
    | definition_macro_definer
    | definition_method_definer
    | definition_shared_symbols_definer
    | definition_suite_definer
    | definition_table_definer
    | definition_test_definer
    | definition_variable_definer
    | definition_macro_call
    | PARSED_DEFINITION
    {
      methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
    }

definition_class_definer ::= DEFINE modifiers? CLASS variable_name LPAREN supers? RPAREN slot_declarations? class_definition_tail
  {
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
    pin=CLASS
  }

class_definition_tail ::= END CLASS variable_name? | END variable_name?

supers ::= variable_name (COMMA variable_name)*
  {
    recoverUntil="supers_recovery"
  }

private supers_recovery ::= !RPAREN

slot_declarations ::= (slot_declaration SEMICOLON)*
  {
    recoverUntil="slot_declarations_recovery"
  }

private slot_declarations_recovery ::= !class_definition_tail

private slot_declaration ::= (slot_spec|init_arg_spec|inherited_slot_spec)

slot_spec ::= slot_adjective* allocation? SLOT variable_name (COLON_COLON operand_expr)? init_expression? slot_options?

init_arg_spec ::= <<unreservedNameWithValues "required">>? <<unreservedNameWithValues "keyword">> symbol init_expression? init_arg_options?

inherited_slot_spec ::= <<unreservedNameWithValues "inherited">> SLOT variable_name init_expression? inherited_options?

slot_adjective ::= <<unreservedNameWithValues "sealed">> | CONSTANT_T

allocation ::= <<unreservedNameWithValues "instance" "each-subclass" "virtual">> | CLASS

init_expression ::= EQUAL expression

slot_options ::= (COMMA slot_option)*

slot_option ::=
      setter_slot_option
    | init_keyword_slot_option
    | required_init_keyword_slot_option
    | init_value_slot_option
    | init_function_slot_option
    | type_slot_option

init_arg_options ::= (COMMA init_arg_option)*

init_arg_option ::=  type_slot_option | init_value_slot_option | init_function_slot_option

inherited_options ::= (COMMA inherited_option)*

private inherited_option ::= init_value_slot_option | init_function_slot_option

setter_slot_option ::= <<keywordWithValue "setter:">> (variable_name|HASH_F)

init_keyword_slot_option ::= <<keywordWithValue "init-keyword:">> symbol

required_init_keyword_slot_option ::= <<keywordWithValue "required-init-keyword:">> symbol

init_value_slot_option ::= <<keywordWithValue "init-value:">> expression

init_function_slot_option ::= <<keywordWithValue "init-function:">> expression

type_slot_option ::= <<keywordWithValue "type:">> expression

definition_constant_definer ::= DEFINE modifiers? CONSTANT_T (variable | variable_list) EQUAL expression
  {
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
    pin=CONSTANT_T
  }

definition_copy_down_method_definer ::= DEFINE modifiers? COPY_DOWN_METHOD variable_name list_fragment?
  {
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
    pin=COPY_DOWN_METHOD
  }

definition_domain_definer ::= DEFINE modifiers? DOMAIN variable_name bracketed_fragment
  {
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
    pin=DOMAIN
  }

definition_function_definer ::= DEFINE modifiers? FUNCTION variable_name parameter_list body? function_definition_tail
  {
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
    pin=FUNCTION
  }

function_definition_tail ::= END FUNCTION variable_name? | END variable_name?

definition_generic_definer ::= DEFINE modifiers? GENERIC variable_name list_fragment
  {
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
    pin=GENERIC
  }

definition_library_definer ::= DEFINE LIBRARY variable_name ((export_clause|use_clause) SEMICOLON)* library_definition_tail
  {
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
    pin=LIBRARY
  }

library_definition_tail ::= END LIBRARY variable_name? | END variable_name?

definition_module_definer ::= DEFINE MODULE variable_name ((export_clause|create_clause|use_clause) SEMICOLON)* module_definition_tail
  {
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
    pin=MODULE
  }

module_definition_tail ::= END MODULE variable_name? | END variable_name?

export_clause ::= EXPORT (ordinary_binding_name (COMMA ordinary_binding_name)*)?

create_clause ::= CREATE (ordinary_binding_name (COMMA ordinary_binding_name)*)?

use_clause ::= USE ordinary_binding_name (COMMA clause_option)*

clause_option ::= <<clauseOption>>

import_option ::= KEYWORD (ALL|LBRACE variable_specs RBRACE)

private variable_specs ::= (variable_spec (COMMA variable_spec)*)?

// TODO: Remove the NONDEFINING_BEGIN_WORD when the macro hacks are gone.
variable_spec ::= (variable_name | NONDEFINING_BEGIN_WORD) (EQUAL_ARROW (variable_name | NONDEFINING_BEGIN_WORD))?

exclude_option ::= KEYWORD LBRACE (variable_name (COMMA variable_name)*)? RBRACE

prefix_option ::= KEYWORD string

rename_option ::= KEYWORD LBRACE (variable_name EQUAL_ARROW variable_name (COMMA variable_name EQUAL_ARROW variable_name)*)? RBRACE

export_option ::= KEYWORD (ALL|LBRACE ((variable_name | NONDEFINING_BEGIN_WORD) (COMMA (variable_name | NONDEFINING_BEGIN_WORD))*)? RBRACE)

definition_macro_definer ::= DEFINE modifiers? MACRO_T macro_definition
  {
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
    pin=MACRO_T
  }

definition_method_definer ::= DEFINE modifiers? METHOD variable_name parameter_list body? method_definition_tail
  {
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
    pin=METHOD
  }

method_definition_tail ::= END METHOD variable_name? | END variable_name?

definition_shared_symbols_definer ::= DEFINE modifiers? SHARED_SYMBOLS_T variable_name shared_symbols? shared_symbols_definition_tail
  {
    pin=SHARED_SYMBOLS_T
  }

shared_symbols_definition_tail ::= END SHARED_SYMBOLS_T variable_name? | END variable_name?

shared_symbols ::= (symbol (COMMA symbol)*)?

definition_suite_definer ::= DEFINE SUITE variable_name LPAREN suite_arguments? RPAREN suite_components? suite_definition_tail
  {
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
    pin=SUITE
  }

suite_arguments ::= suite_argument (COMMA suite_argument)*

suite_argument ::= suite_argument_description | suite_argument_setup_function | suite_argument_cleanup_function | suite_test_tags
  {
    recoverUntil="suite_argument_recovery"
  }

private suite_argument_recovery ::= !(COMMA | RPAREN)

suite_argument_description ::= <<keywordWithValue "description:">> string

suite_argument_setup_function ::= <<keywordWithValue "setup-function:">> variable_name

suite_argument_cleanup_function ::= <<keywordWithValue "cleanup-function:">> variable_name

suite_test_tags ::= <<keywordWithValue "tags:">> (HASH_BRACKET constants? RBRACKET | <<unreservedNameWithValues "$all">>)

suite_components ::= suite_component (SEMICOLON suite_component?)*

suite_component ::= test_suite_component | suite_suite_component

test_suite_component ::= TEST variable_name

suite_suite_component ::= SUITE variable_name

suite_definition_tail ::= END SUITE variable_name? | END variable_name?

definition_table_definer ::= DEFINE <<unreservedNameWithValues "table">> variable EQUAL LBRACE table_entries? RBRACE
  {
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
    pin=2
  }

private table_entries ::= table_entry (COMMA table_entry?)*
  {
    recoverUntil="table_entries_recovery"
  }

private table_entries_recovery ::= !RBRACE

table_entry ::= expression EQUAL_ARROW expression

definition_test_definer ::= DEFINE TEST variable_name LPAREN test_arguments? RPAREN body? test_definition_tail
  {
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
    pin=TEST
  }

test_arguments ::= test_argument (COMMA test_argument)*

test_argument ::= (<<keywordWithValue "description:">> string | suite_test_tags)
  {
    recoverUntil="test_argument_recovery"
  }

private test_argument_recovery ::= !(COMMA | RPAREN)

test_definition_tail ::= END TEST variable_name? | END variable_name?

definition_variable_definer ::= DEFINE modifiers? VARIABLE_T (variable | variable_list) EQUAL expression
  {
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
    pin=VARIABLE_T
  }

definition_macro_call ::=
      DEFINE definition_macro_call_body definition_tail
    | DEFINE modifiers? define_list_word list_fragment?

// Handle unknown macros
// FIXME: define_body_word is optional because sometimes the parser is confused and treat it like a modifier
private definition_macro_call_body ::= modifiers? define_body_word? body_fragment?
  {
    recoverUntil="definition_macro_call_body_fragment_recovery"
  }

private definition_macro_call_body_fragment_recovery ::= !definition_tail

modifier ::= nondefining_name

modifiers ::= modifier+

definition_tail ::= END define_body_word macro_name | END macro_name | END

/* Local Declarations, page 423 */

local_declaration ::=
      LET bindings
    | LET HANDLER_T condition EQUAL handler
    | LOCAL local_methods
    | PARSED_LOCAL_DECLARATION

condition ::=
      operand_expr
    | LPAREN operand_expr COMMA property_list RPAREN

handler ::= expression

local_methods ::= method_definition (COMMA method_definition)*

bindings ::= variable EQUAL expression | variable_list EQUAL expression

variable_list ::= LPAREN (variables COMMA HASH_REST variable_name | variables | HASH_REST variable_name) RPAREN

private variables ::= variable (COMMA variable)*

variable ::= variable_name COLON_COLON operand_expr | variable_name

variable_name ::= ordinary_name | VARIABLE_IGNORE

/* Expression, page 424-425 */

expressions ::= expression (COMMA expression)*

expression ::=
      assign_expr
    | logical_group
    | comparison_group
    | sum_group
    | mul_group
    | exp_expr
    | negate_group
    | operand_expr

// private rules to define operators with the same priority
private negate_group ::= arith_neg_expr | log_neg_expr
private mul_group ::= mul_expr | div_expr
private sum_group ::= plus_expr | minus_expr
private comparison_group ::=
      ident_expr | eq_expr | nonident_expr | neq_expr | lt_expr | gt_expr | lteq_expr | gteq_expr
private logical_group ::= and_expr | or_expr

// public rules for each expression
assign_expr ::= expression COLON_EQUAL expression { rightAssociative=true }
arith_neg_expr ::= MINUS expression
log_neg_expr ::= TILDE expression
div_expr ::= expression SLASH expression
mul_expr ::= expression STAR expression
minus_expr ::= expression MINUS expression
plus_expr ::= expression PLUS expression
exp_expr ::= expression CARET expression { rightAssociative=true }
ident_expr ::= expression EQUAL_EQUAL expression
eq_expr ::= expression EQUAL expression
nonident_expr ::= expression TILDE_EQUAL_EQUAL expression
neq_expr ::= expression TILDE_EQUAL expression
lt_expr ::= expression LESS_THAN expression
gt_expr ::= expression GREATER_THAN expression
lteq_expr ::= expression LESS_THAN_EQUAL expression
gteq_expr ::= expression GREATER_THAN_EQUAL expression
and_expr ::= expression AMPERSAND expression
or_expr ::= expression VERT_BAR expression
operand_expr ::= operand

operand ::= leaf ( LPAREN arguments? RPAREN | LBRACKET arguments? RBRACKET | DOT variable_name )*

function_macro_call ::= function_word LPAREN body_fragment? RPAREN

private leaf ::=
      literal
    | statement
    | function_macro_call
    | variable_name
    | LPAREN expression RPAREN
    | PARSED_FUNCTION_CALL
    | PARSED_MACRO_CALL

arguments ::= argument (COMMA argument)*

argument ::= symbol expression? | expression

literal ::=
      NUMBER
    | CHARACTER_LITERAL
    | string_literal
    | symbol
    | HASH_T
    | HASH_F
    | HASH_PAREN constants DOT constant RPAREN
    | HASH_PAREN constants? RPAREN
    | HASH_BRACKET constants? RBRACKET
    | PARSED_LIST_CONSTANT
    | PARSED_VECTOR_CONSTANT

string_literal ::= string+

constants ::= constant (COMMA constant)*

constant ::= literal | symbol

/* Statements, page 425 */

/*
 * The following is the general-purpose statement parsing rule, and is written
 * under the assumption that statements are macros that will be expanded by the
 * macro expansion system. Although we are parsing the reserved-word statements
 * using specific BNF grammar, this is more or less how we will handle
 * user-defined statement macros -- but among other things we need to ensure the
 * end_clause's begin_word matches the statement's begin_word.
 */
/*

statement ::= begin_word body_fragment? end_clause

end_clause ::= END begin_word?

*/

statement ::=
      begin_statement
    | block_statement
    | case_statement
    | for_statement
    | if_statement
    | method_statement
    | select_statement
    | unless_statement
    | until_statement
    | when_statement
    | while_statement
    | macro_statement

// This won't parse any kind of macro statement, but only the ones we support at the moment. When custom macro support
// is added this has to be changed.
macro_statement ::= begin_word variable_name? bracketed_fragment? body? end_clause

end_clause ::= END begin_word?

begin_statement ::= BEGIN body? END
    { pin=1 }

block_statement ::= BLOCK LPAREN variable_name? RPAREN body? afterwards_statement? cleanup_statement? exception_statement* block_tail
    { pin=1 }

block_tail ::= END BLOCK?

afterwards_statement ::= AFTERWARDS body?

cleanup_statement ::= CLEANUP body?

exception_statement ::= EXCEPTION LPAREN variable (COMMA exception_options)* RPAREN body?

exception_options ::= KEYWORD expression // KEYWORD should be only test: or init-arguments:

for_statement ::= FOR LPAREN for_clauses RPAREN body? finally_clause? for_statement_tail

for_statement_tail ::= END FOR?

for_clauses ::= ((for_clause COMMA)* end_for_clause) | (for_clause (COMMA for_clause)*)
  {
    recoverUntil="for_clauses_recovery"
  }

private for_clauses_recovery ::= !RPAREN

for_clause ::= explicit_step_clause | collection_clause | numeric_clauses | keyed_by_clause

end_for_clause ::= KEYWORD expression // FIXME: KEYWORD should be only until: and while:

explicit_step_clause ::= variable EQUAL expression THEN expression

collection_clause ::= variable IN expression (USING expression)?

numeric_clauses ::= variable FROM expression ((TO|ABOVE|BELOW) expression)? (BY expression)?

keyed_by_clause ::= variable KEYED_BY variable IN expression

finally_clause ::= FINALLY body?

if_statement ::= IF LPAREN statement_test RPAREN body? elseif_statement* else_statement? if_tail { pin=IF }

if_tail ::= END IF?

private statement_test ::= expression { recoverUntil="statement_test_recovery" }

private statement_test_recovery ::= !RPAREN

elseif_statement ::= ELSEIF LPAREN expression RPAREN body? { pin=ELSEIF }

else_statement ::= ELSE body? { pin=ELSE }

method_statement ::= METHOD parameter_list body? method_tail
    { pin=METHOD }

method_tail ::= END METHOD?

unless_statement ::= UNLESS LPAREN statement_test RPAREN body? unless_tail

unless_tail ::= END UNLESS?

until_statement ::= UNTIL LPAREN statement_test RPAREN body? until_tail

until_tail ::= END UNTIL?

when_statement ::= WHEN LPAREN statement_test RPAREN body? when_tail

when_tail ::= END WHEN?

while_statement ::= WHILE LPAREN statement_test RPAREN body? while_tail

while_tail ::= END WHILE?

select_statement ::= SELECT LPAREN expression (BY expression)? RPAREN select_stmt_clause* select_stmt_tail

select_stmt_tail ::= END SELECT?

select_stmt_clause ::= select_stmt_label select_stmt_constituents? (SEMICOLON | &select_stmt_tail)

select_stmt_label ::=
      OTHERWISE EQUAL_ARROW?
    | LPAREN expressions RPAREN EQUAL_ARROW
    | expressions EQUAL_ARROW

select_stmt_constituents ::= select_stmt_constituent (SEMICOLON select_stmt_constituent)*

select_stmt_constituent ::= !select_stmt_label constituent

/*
 * The case_statement productions are distinct from the case_body, case_label,
 * etc. productions from the DRM. The DRM productions are used in macro parsing
 * and are more lenient.
 */

case_statement ::= CASE case_stmt_clause* case_stmt_tail

case_stmt_tail ::= END CASE?

case_stmt_clause ::= case_stmt_label case_stmt_constituents? (SEMICOLON | &case_stmt_tail)
  {
    recoverUntil="case_stmt_clause_recovery"
  }

private case_stmt_clause_recovery ::= !(case_stmt_tail | case_stmt_clause)

case_stmt_label ::=
      OTHERWISE EQUAL_ARROW?
    | expression EQUAL_ARROW

case_stmt_constituents ::= case_stmt_constituent (SEMICOLON case_stmt_constituent)*

case_stmt_constituent ::= !case_stmt_label constituent

/* DRM case_body productions */

case_body ::= cases SEMICOLON?

cases ::= case_label case_constituents? (SEMICOLON case_constituents)*

case_label ::=
      LPAREN expression COMMA expressions RPAREN EQUAL_ARROW
    | expressions EQUAL_ARROW
    | OTHERWISE EQUAL_ARROW?

case_constituents ::=
      case_constituent (SEMICOLON case_constituent)*

case_constituent ::=
      !case_label constituent

/* Methods, pages 426-427 */

method_definition ::= METHOD? variable_name parameter_list body? method_definition_tail

parameter_list ::=
      LPAREN parameters? RPAREN EQUAL_ARROW variable SEMICOLON
    | LPAREN parameters? RPAREN EQUAL_ARROW LPAREN values_list? RPAREN semicolon?
    | LPAREN parameters? RPAREN SEMICOLON?

parameters ::=
      required_parameters COMMA next_rest_key_parameter_list
    | required_parameters
    | next_rest_key_parameter_list

next_rest_key_parameter_list ::=
      HASH_NEXT variable_name COMMA rest_key_parameter_list
    | HASH_NEXT variable_name
    | rest_key_parameter_list

rest_key_parameter_list ::=
      HASH_REST variable_name COMMA key_parameter_list
    | HASH_REST variable_name
    | key_parameter_list

key_parameter_list ::=
      HASH_KEY COMMA HASH_ALL_KEYS
    | HASH_KEY keyword_parameters COMMA HASH_ALL_KEYS
    | HASH_KEY keyword_parameters
    | HASH_KEY

required_parameters ::= required_parameter (COMMA required_parameter)*

required_parameter ::=
      variable EQUAL_EQUAL expression
    | variable

keyword_parameters ::= keyword_parameter (COMMA keyword_parameter)*

keyword_parameter ::= symbol? variable default_value?

default_value ::= EQUAL expression

values_list ::=
      variables COMMA HASH_REST variable
    | variables
    | HASH_REST variable

/* Macro Definitions, page 427 */

macro_definition ::=
    macro_name main_rule_set aux_rule_sets? END MACRO_T? macro_name?

main_rule_set ::=
      body_style_definition_rules
    | list_style_definition_rules
    | statement_rules
    | function_rules

body_style_definition_rules ::= body_style_definition_rule+

list_style_definition_rules ::= list_style_definition_rule+

statement_rules ::= statement_rule+

function_rules ::= function_rule+

/*
 * The following two rules are altered in substance from
 * what appears in the BNF grammar, because that's inherently
 * ambiguous in this area.  The original rules follow the
 * word DEFINE with (roughly)
 *
 *   definition_head_opt macro_name pattern_opt
 *
 * but there's no way a stupid parser can tell which word
 * in a sequence corresponds to the macro_name, unless some
 * extra context-sensitive information is introduced.  Rather
 * than mandating such odd behavior, I've simply decided to
 * offload that work to the semantic analysis phase, and
 * to leave these rules as simple as possible.
 */

body_style_definition_rule ::= LBRACE body_style_definition_rule_body RBRACE EQUAL_ARROW rhs
  {
    pin=2
  }

private body_style_definition_rule_body ::= DEFINE pattern SEMICOLON? END
  {
    recoverUntil="body_style_definition_rule_recovery"
  }

private body_style_definition_rule_body_recovery ::= !RBRACE

list_style_definition_rule ::= LBRACE DEFINE pattern RBRACE EQUAL_ARROW rhs

rhs ::= LBRACE rhs_body? RBRACE SEMICOLON?

private rhs_body ::= template
  {
    recoverUntil="rhs_body_recovery"
  }

private rhs_body_recovery ::= !RBRACE

statement_rule ::= LBRACE macro_name maybe_pattern_and_semicolon END RBRACE EQUAL_ARROW rhs

function_rule ::= LBRACE macro_name LPAREN pattern? RPAREN RBRACE EQUAL_ARROW rhs

/* definition_head ::=
      modifier_pattern
    | definition_head modifier_pattern */

/* modifier_pattern ::=
      modifier
    | pattern_variable */

/* Patterns, pages 427-429 */

maybe_pattern_and_semicolon ::= pattern SEMICOLON? | SEMICOLON?

pattern ::= pattern_list (SEMICOLON pattern_list)*

pattern_list ::=
      pattern_sequence COMMA pattern_list
    | pattern_sequence
    | property_list_pattern

pattern_sequence ::= simple_pattern+

simple_pattern ::=
      name_not_end
    | EQUAL_ARROW
    | bracketed_pattern
    | binding_pattern
    | pattern_variable

bracketed_pattern ::=
      LPAREN pattern? RPAREN
    | LBRACKET pattern? RBRACKET
    | LBRACE pattern? RBRACE

binding_pattern ::=
      pattern_variable COLON_COLON pattern_variable EQUAL pattern_variable
    | pattern_variable COLON_COLON pattern_variable LESS_THAN MINUS pattern_variable
    | pattern_variable COLON_COLON pattern_variable
    | pattern_variable EQUAL pattern_variable
    | pattern_variable LESS_THAN MINUS pattern_variable

pattern_variable ::=
      QUERY CONSTRAINED_NAME
    | QUERY word_name
    | ELLIPSIS

property_list_pattern ::=
      HASH_REST pattern_variable COMMA HASH_KEY pattern_keywords?
    | HASH_REST pattern_variable
    | HASH_KEY pattern_keywords?

pattern_keywords ::=
      HASH_ALL_KEYS
    | pattern_keyword COMMA pattern_keywords
    | pattern_keyword

pattern_keyword ::=
      QUERY word_name default_value?
    | QUERY CONSTRAINED_NAME default_value?
    | QUERY_QUERY word_name default_value?
    | QUERY_QUERY CONSTRAINED_NAME default_value?

/* Templates, pages 429-430 */

template ::= template_element+

template_element ::=
      word_name
    | symbol
    | NUMBER
    | CHARACTER_LITERAL
    | substitution
    | string
    | unary_operator_only
    | separator
    | hash_word
    | DOT
    | COLON_COLON
    | EQUAL_ARROW
    | LPAREN template? RPAREN
    | LBRACKET template? RBRACKET
    | LBRACE template? RBRACE
    | HASH_PAREN template? RPAREN
    | HASH_BRACKET template? RBRACKET
    | PARSED_LIST_CONSTANT
    | PARSED_VECTOR_CONSTANT
    | nondefining_begin_word_token // FIXME: allows begin words

separator ::=
      SEMICOLON
    | COMMA
    | binary_operator
    /* idle thought:  what about moving '.' to here? */

substitution ::=
      name_prefix? QUERY name_string_or_symbol name_suffix?
    | QUERY_QUERY word_name separator? ELLIPSIS
    | ELLIPSIS
    | QUERY_EQUAL word_name

name_prefix ::= string HASH_HASH

name_suffix ::= HASH_HASH string

name_string_or_symbol ::= word_name | string | symbol

/* Auxiliary Rule Sets, page 430 */

aux_rule_sets ::= aux_rule_set+

aux_rule_set ::= symbol aux_rules

aux_rules ::= aux_rule+

aux_rule ::= LBRACE pattern? RBRACE EQUAL_ARROW rhs
