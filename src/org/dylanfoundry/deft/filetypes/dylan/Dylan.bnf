{
  parserClass="org.dylanfoundry.deft.filetypes.dylan.parser.DylanParser"
  parserUtilClass="org.dylanfoundry.deft.filetypes.dylan.DylanParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
 
  psiClassPrefix="Dylan"
  psiImplClassSuffix="Impl"
  psiPackage="org.dylanfoundry.deft.filetypes.dylan.psi"
  psiImplPackage="org.dylanfoundry.deft.filetypes.dylan.psi.impl"
 
  elementTypeHolderClass="org.dylanfoundry.deft.filetypes.dylan.psi.DylanTypes"
  elementTypeClass="org.dylanfoundry.deft.filetypes.dylan.psi.DylanElementType"
  tokenTypeClass="org.dylanfoundry.deft.filetypes.dylan.psi.DylanTokenType"

  psiImplUtilClass="org.dylanfoundry.deft.filetypes.dylan.psi.impl.DylanPsiImplUtil"
}
 
dylanFile ::= headers source_records?

headers ::= header*

header ::= (KEY HEADER_SEPARATOR header_values) {methods=[getKey]}

header_values ::= CRLF | (VALUE CRLF)+ {methods=[getValues]}

//source_records ::= source_record | variable | expression | name | token | body? | case_body? | macro
source_records ::= source_record | variable | expression | word_name | token | case_body | macro

token ::= word_name | symbol | NUMBER | CHARACTER_LITERAL | string | operator | punctuation | hash_word

string ::= (STRING_CHARACTER|STRING_ESCAPE_CHARACTER)+

constant_string ::= HASH string

symbol ::= constant_string | KEYWORD

punctuation ::= bracketing_punctuation | non_bracketing_punctuation

bracketing_punctuation ::= LPAREN | RPAREN | LBRACKET | RBRACKET | LBRACE | RBRACE | HASH_PAREN | HASH_BRACKET

non_bracketing_punctuation ::=
      COMMA
    | DOT
    | SEMICOLON
    | COLON_COLON
    | MINUS
    | EQUAL
    | EQUAL_EQUAL
    | EQUAL_ARROW
    | HASH_HASH
    | QUERY
    | QUERY_QUERY
    | QUERY_EQUAL
    | ELLIPSIS

core_word ::= non_end_core_word | END

non_end_core_word ::= DEFINE | HANDLER_T | LET | LOCAL | MACRO_T | OTHERWISE

nondefining_word ::= NONDEFINING_BEGIN_WORD | NONDEFINING_FUNCTION_WORD | NONDEFINING_NONEXPRESSION_WORD

define_body_word ::= DEFINE_BODY_NONEXPRESSION_WORD | DEFINE_BODY_BEGIN_WORD | DEFINE_BODY_FUNCTION_WORD

define_list_word ::= DEFINE_LIST_NONEXPRESSION_WORD | DEFINE_LIST_BEGIN_WORD | DEFINE_LIST_FUNCTION_WORD

nonexpression_word ::= NONDEFINING_NONEXPRESSION_WORD | DEFINE_BODY_NONEXPRESSION_WORD | DEFINE_LIST_NONEXPRESSION_WORD | FUNCTION | CLASS | DOMAIN | LIBRARY | MODULE | GENERIC

begin_word ::= NONDEFINING_BEGIN_WORD | DEFINE_BODY_BEGIN_WORD | DEFINE_LIST_BEGIN_WORD | METHOD

function_word ::= NONDEFINING_FUNCTION_WORD | DEFINE_BODY_FUNCTION_WORD | DEFINE_LIST_FUNCTION_WORD

reserved_word ::= core_word | NONDEFINING_FUNCTION_WORD | NONDEFINING_BEGIN_WORD | define_body_word | define_list_word

unreserved_word ::= NONDEFINING_NONEXPRESSION_WORD

escaped_name ::= ESCAPED_WORD | OPERATOR_NAME

unreserved_name ::= unreserved_word | escaped_name

word_name ::= reserved_word | unreserved_name

nondefining_name ::= nondefining_word | escaped_name

private ordinary_name ::= nonexpression_word | escaped_name

macro_name ::= nondefining_name | define_body_word | define_list_word

name_not_end ::= macro_name | non_end_core_word

hash_word ::= HASH_T | HASH_F | HASH_NEXT | HASH_REST | HASH_KEY | HASH_ALL_KEYS | HASH_INCLUDE

operator ::= BINARY_OPERATOR_ONLY | UNARY_OPERATOR_ONLY | UNARY_AND_BINARY_OPERATOR | EQUAL | EQUAL_EQUAL

unary_operator ::= UNARY_OPERATOR_ONLY | UNARY_AND_BINARY_OPERATOR

binary_operator ::= BINARY_OPERATOR_ONLY | UNARY_AND_BINARY_OPERATOR | EQUAL | EQUAL_EQUAL

/* Program Structure, page 414 */

// FIXME: original is body?
private source_record ::= body

private body ::= constituents SEMICOLON?

private constituents ::= constituent (SEMICOLON constituent)* | COMMENT

private constituent ::= non_expression_constituent | expression

private non_expression_constituent ::= definition | local_declaration

macro ::= definition_macro_call | statement | function_macro_call | PARSED_MACRO_CALL

/* Property Lists, page 414 */

property_list ::= property (COMMA property)*

property ::= symbol symbol_value

symbol_value ::= basic_fragment

/* Fragments, page 415-416 */

body_fragment ::= non_statement_body_fragment | statement non_statement_body_fragment?

private list_fragment ::= non_statement_list_fragment | statement non_statement_list_fragment?

basic_fragment ::= non_statement_basic_fragment | statement non_statement_basic_fragment?

non_statement_body_fragment ::=
      definition semicolon_fragment?
    | local_declaration semicolon_fragment?
    | simple_fragment body_fragment?
    | COMMA body_fragment?
    | SEMICOLON body_fragment?

semicolon_fragment ::= SEMICOLON body_fragment?

private non_statement_list_fragment ::= simple_fragment list_fragment? | COMMA list_fragment?

non_statement_basic_fragment ::= simple_fragment basic_fragment?

private simple_fragment ::=
      variable_name
    | constant_fragment
    | operator
    | bracketed_fragment
    | function_macro_call
    | hash_word
    | DOT
    | COLON_COLON
    | EQUAL_ARROW
    | QUERY
    | QUERY_QUERY
    | QUERY_EQUAL
    | ELLIPSIS
    | HASH_HASH
    | OTHERWISE
    | PARSED_FUNCTION_CALL
    | PARSED_MACRO_CALL

bracketed_fragment ::=
      LPAREN body_fragment? RPAREN
    | LBRACKET body_fragment? RBRACKET
    | LBRACE body_fragment? RBRACE

constant_fragment ::=
      NUMBER
    | CHARACTER_LITERAL
    | string
    | symbol
    | HASH_PAREN constants DOT constant RPAREN
    | HASH_PAREN constants? RPAREN
    | HASH_BRACKET constants? RBRACKET
    | PARSED_LIST_CONSTANT
    | PARSED_VECTOR_CONSTANT

/* Definitions, page 416 */

definition ::=
      definition_class_definer
    | definition_constant_definer
    | definition_copy_down_method_definer
    | definition_domain_definer
    | definition_function_definer
    | definition_generic_definer
    | definition_library_definer
    | definition_module_definer
    | definition_macro_definer
    | definition_method_definer
    | definition_shared_symbols_definer
    | definition_variable_definer
    | definition_macro_call
    | DEFINE MACRO_T macro_definition
    | PARSED_DEFINITION {methods=[getPresentation]}

definition_class_definer ::= DEFINE modifiers? CLASS variable_name LPAREN supers? RPAREN slot_declarations? class_definition_tail
  {
    mixin="org.dylanfoundry.deft.filetypes.dylan.psi.impl.DylanDefinerImpl"
    implements="org.dylanfoundry.deft.filetypes.dylan.psi.DylanDefiner"
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
  }

class_definition_tail ::= END CLASS variable_name? | END variable_name?

supers ::= variable_name (COMMA variable_name)*

slot_declarations ::= slot_declaration*

// FIXME: This is not present in the original yacc file.
// Ugly hack to include the 'constant' slot modifier
slot_declaration ::=
     (modifiers|CONSTANT_T)? SLOT variable (EQUAL expression)? init_specifications? semicolon_fragment

init_specifications ::= (COMMA init_specification)+

init_specification ::= symbol expression

definition_constant_definer ::= DEFINE modifiers? CONSTANT_T list_fragment?
  {
    mixin="org.dylanfoundry.deft.filetypes.dylan.psi.impl.DylanDefinerImpl"
    implements="org.dylanfoundry.deft.filetypes.dylan.psi.DylanDefiner"
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
  }

definition_copy_down_method_definer ::= DEFINE modifiers? COPY_DOWN_METHOD variable_name list_fragment?
  {
    mixin="org.dylanfoundry.deft.filetypes.dylan.psi.impl.DylanDefinerImpl"
    implements="org.dylanfoundry.deft.filetypes.dylan.psi.DylanDefiner"
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
  }

definition_domain_definer ::= DEFINE modifiers? DOMAIN variable_name bracketed_fragment
  {
    mixin="org.dylanfoundry.deft.filetypes.dylan.psi.impl.DylanDefinerImpl"
    implements="org.dylanfoundry.deft.filetypes.dylan.psi.DylanDefiner"
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
  }

definition_function_definer ::= DEFINE modifiers? FUNCTION variable_name parameter_list body? function_definition_tail
  {
    mixin="org.dylanfoundry.deft.filetypes.dylan.psi.impl.DylanDefinerImpl"
    implements="org.dylanfoundry.deft.filetypes.dylan.psi.DylanDefiner"
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
  }

function_definition_tail ::= END FUNCTION variable_name? | END variable_name?

definition_generic_definer ::= DEFINE modifiers? GENERIC variable_name list_fragment
  {
    mixin="org.dylanfoundry.deft.filetypes.dylan.psi.impl.DylanDefinerImpl"
    implements="org.dylanfoundry.deft.filetypes.dylan.psi.DylanDefiner"
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
  }

definition_library_definer ::= DEFINE LIBRARY variable_name ((export_clause|use_clause) SEMICOLON)* library_definition_tail
  {
    mixin="org.dylanfoundry.deft.filetypes.dylan.psi.impl.DylanDefinerImpl"
    implements="org.dylanfoundry.deft.filetypes.dylan.psi.DylanDefiner"
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
  }

library_definition_tail ::= END LIBRARY variable_name? | END variable_name?

definition_module_definer ::= DEFINE MODULE variable_name ((export_clause|create_clause|use_clause) SEMICOLON)* module_definition_tail
  {
    mixin="org.dylanfoundry.deft.filetypes.dylan.psi.impl.DylanDefinerImpl"
    implements="org.dylanfoundry.deft.filetypes.dylan.psi.DylanDefiner"
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
  }

module_definition_tail ::= END MODULE variable_name? | END variable_name?

export_clause ::= EXPORT (ordinary_name (COMMA ordinary_name)*)?

create_clause ::= CREATE (ordinary_name (COMMA ordinary_name)*)?

use_clause ::= USE ordinary_name (COMMA clause_option)*

clause_option ::= <<clauseOption>>

import_option ::= KEYWORD (ALL|LBRACE variable_specs RBRACE)

private variable_specs ::= (variable_spec (COMMA variable_spec)*)?

variable_spec ::= variable_name (EQUAL_ARROW variable_name)?

exclude_option ::= KEYWORD LBRACE (variable_name (COMMA variable_name)*)? RBRACE

prefix_option ::= KEYWORD string

rename_option ::= KEYWORD LBRACE (variable_name EQUAL_ARROW variable_name (COMMA variable_name EQUAL_ARROW variable_name)*)? RBRACE

export_option ::= KEYWORD (ALL|LBRACE (variable_name (COMMA variable_name)*)? RBRACE)

definition_macro_definer ::= DEFINE modifiers? MACRO_T variable_name main_rule_set? macro_definition_tail
  {
    mixin="org.dylanfoundry.deft.filetypes.dylan.psi.impl.DylanDefinerImpl"
    implements="org.dylanfoundry.deft.filetypes.dylan.psi.DylanDefiner"
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
  }

macro_definition_tail ::= END MACRO_T variable_name? | END variable_name?

definition_method_definer ::= DEFINE modifiers? METHOD variable_name parameter_list body? method_definition_tail
  {
    mixin="org.dylanfoundry.deft.filetypes.dylan.psi.impl.DylanDefinerImpl"
    implements="org.dylanfoundry.deft.filetypes.dylan.psi.DylanDefiner"
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
  }

method_definition_tail ::= END METHOD variable_name? | END variable_name?

definition_shared_symbols_definer ::= DEFINE modifiers? SHARED_SYMBOLS_T variable_name shared_symbols? shared_symbols_definition_tail

shared_symbols_definition_tail ::= END SHARED_SYMBOLS_T variable_name? | END variable_name?

shared_symbols ::= (symbol (COMMA symbol)*)?

definition_variable_definer ::= DEFINE modifiers? VARIABLE_T list_fragment?
  {
    mixin="org.dylanfoundry.deft.filetypes.dylan.psi.impl.DylanDefinerImpl"
    implements="org.dylanfoundry.deft.filetypes.dylan.psi.DylanDefiner"
    methods=[getName setName getNameIdentifier getPresentationIcon getPresentation]
  }

definition_macro_call ::=
      DEFINE modifiers? define_body_word body_fragment? definition_tail
    | DEFINE modifiers? define_list_word list_fragment?

modifier ::= nondefining_name

modifiers ::= modifier+

definition_tail ::= END define_body_word macro_name | END macro_name | END

/* Local Declarations, page 417 */

local_declaration ::=
      LET bindings
    | LET HANDLER_T condition EQUAL handler
    | LOCAL local_methods
    | PARSED_LOCAL_DECLARATION

condition ::=
      unparenthesized_operand
    | LPAREN operand RPAREN operand_tails
    | LPAREN operand COMMA property_list RPAREN

handler ::= expression

local_methods ::= method_definition (COMMA method_definition)*

bindings ::= variable EQUAL expression | LPAREN variable_list RPAREN EQUAL expression

variable_list ::= variables COMMA HASH_REST variable_name | variables | HASH_REST variable_name

variables ::= variable (COMMA variable)*

variable ::= variable_name COLON_COLON operand | variable_name

variable_name ::= ordinary_name | VARIABLE_IGNORE

/* Expression, page 418-419 */

expressions ::= expression (COMMA expression)*

expression ::= binary_operand (binary_operator binary_operand)*

expression_no_symbol ::= binary_operand_no_symbol binary_operator binary_operand | binary_operand_no_symbol

unparenthesized_expression ::= unparenthesized_binary_operand (binary_operator binary_operand)*

binary_operand_no_symbol ::= unary_operator? operand

binary_operand ::= symbol | binary_operand_no_symbol

unparenthesized_binary_operand ::= symbol | unparenthesized_operand | unary_operator operand

//operand ::= operand operand_tail | leaf
operand ::= leaf operand_tail*

//unparenthesized_operand ::= unparenthesized_operand operand_tail | unparenthesized_leaf
unparenthesized_operand ::= unparenthesized_leaf operand_tail*

operand_tail ::= LPAREN arguments? RPAREN | LBRACKET arguments? RBRACKET | DOT variable_name

operand_tails ::= operand_tail*

function_macro_call ::= function_word LPAREN body_fragment? RPAREN

leaf ::= LPAREN expression RPAREN | unparenthesized_leaf

unparenthesized_leaf ::=
      literal
    | variable_name
    | function_macro_call
    | statement
    | PARSED_FUNCTION_CALL
    | PARSED_MACRO_CALL

arguments ::= argument (COMMA argument)*

argument ::= symbol expression | expression_no_symbol | symbol

literal ::=
      NUMBER
    | CHARACTER_LITERAL
    | string_literal
    | HASH_T
    | HASH_F
    | HASH_PAREN constants DOT constant RPAREN
    | HASH_PAREN constants? RPAREN
    | HASH_BRACKET constants? RBRACKET
    | PARSED_LIST_CONSTANT
    | PARSED_VECTOR_CONSTANT

string_literal ::= string+

constants ::= constant (COMMA constant)*

constant ::= literal | symbol

/* Statements, page 419 */

/*
 * The following is the general-purpose statement parsing rule, and is written
 * under the assumption that statements are macros that will be expanded by the
 * macro expansion system. Although we are parsing the reserved-word statements
 * using specific BNF grammar, this is more or less how we will handle
 * user-defined statement macros -- but among other things we need to ensure the
 * end_clause's begin_word matches the statement's begin_word.
 */
/*

statement ::= begin_word body_fragment? end_clause

end_clause ::= END begin_word?

*/

statement ::=
      begin_statement
    | block_statement
    | case_statement
    | for_statement
    | if_statement
    | method_statement
    | select_statement
    | unless_statement
    | until_statement
    | when_statement
    | while_statement
    | begin_word body_fragment? end_clause

end_clause ::= END begin_word?

begin_statement ::= BEGIN body? END
    { pin=1 }

block_statement ::= BLOCK LPAREN variable_name? RPAREN body? afterwards_statement? cleanup_statement? exception_statement* block_tail
    { pin=1 }

block_tail ::= END BLOCK?

afterwards_statement ::= AFTERWARDS body?

cleanup_statement ::= CLEANUP body?

exception_statement ::= EXCEPTION LPAREN variable (COMMA exception_options)* RPAREN body?

exception_options ::= KEYWORD expression // KEYWORD should be only test: or init-arguments:

for_statement ::= FOR LPAREN for_clauses RPAREN body? finally_clause? END FOR?

for_clauses ::= ((for_clause COMMA)* end_for_clause) | (for_clause (COMMA for_clause)*)

for_clause ::= explicit_step_clause | collection_clause | numeric_clauses | keyed_by_clause

end_for_clause ::= KEYWORD expression // FIXME: KEYWORD should be only until: and while:

explicit_step_clause ::= variable EQUAL expression THEN expression

collection_clause ::= variable IN expression (USING expression)?

numeric_clauses ::= variable FROM expression ((TO|ABOVE|BELOW) expression)? (BY expression)?

keyed_by_clause ::= variable KEYED_BY variable IN expression

finally_clause ::= FINALLY body?

if_statement ::= IF LPAREN expression RPAREN body? elseif_statement* else_statement? if_tail

if_tail ::= END IF?

elseif_statement ::= ELSEIF LPAREN expression RPAREN body?

else_statement ::= ELSE body?

method_statement ::= METHOD parameter_list body? END METHOD?
    { pin=1 }

unless_statement ::= UNLESS LPAREN expression RPAREN body? END UNLESS?

until_statement ::= UNTIL LPAREN expression RPAREN body? END UNTIL?

when_statement ::= WHEN LPAREN expression RPAREN body? END WHEN?

while_statement ::= WHILE LPAREN expression RPAREN body? END WHILE?

select_statement ::= SELECT LPAREN expression (BY expression)? RPAREN select_stmt_clause* select_stmt_tail

select_stmt_tail ::= END SELECT?

select_stmt_clause ::= select_stmt_label select_stmt_constituents? (SEMICOLON | &select_stmt_tail)

select_stmt_label ::=
      OTHERWISE EQUAL_ARROW?
    | LPAREN expressions RPAREN EQUAL_ARROW
    | expressions EQUAL_ARROW

select_stmt_constituents ::= select_stmt_constituent (SEMICOLON select_stmt_constituent)*

select_stmt_constituent ::= !select_stmt_label constituent

/*
 * The case_statement productions are distinct from the case_body, case_label,
 * etc. productions from the DRM. The DRM productions are used in macro parsing
 * and are more lenient.
 */

case_statement ::= CASE case_stmt_clause* case_stmt_tail

case_stmt_tail ::= END CASE?

case_stmt_clause ::= case_stmt_label case_stmt_constituents? (SEMICOLON | &case_stmt_tail)

case_stmt_label ::=
      OTHERWISE EQUAL_ARROW?
    | expression EQUAL_ARROW

case_stmt_constituents ::= case_stmt_constituent (SEMICOLON case_stmt_constituent)*

case_stmt_constituent ::= !case_stmt_label constituent

/* DRM case_body productions */

case_body ::= cases SEMICOLON?

cases ::= case_label case_constituents? (SEMICOLON case_constituents)*

case_label ::=
      unparenthesized_expression EQUAL_ARROW
    | unparenthesized_expression COMMA expressions EQUAL_ARROW
    | LPAREN expression RPAREN operand_tails EQUAL_ARROW
    | LPAREN expression RPAREN operand_tails COMMA expressions EQUAL_ARROW
    | LPAREN expression COMMA expressions RPAREN EQUAL_ARROW
    | OTHERWISE EQUAL_ARROW?

case_constituents ::=
      case_constituent (SEMICOLON case_constituent)*

case_constituent ::=
      !case_label constituent

/* Methods, pages 420-421 */

method_definition ::= METHOD? variable_name parameter_list body? method_definition_tail

parameter_list ::=
      LPAREN parameters? RPAREN EQUAL_ARROW variable SEMICOLON
    | LPAREN parameters? RPAREN EQUAL_ARROW LPAREN values_list? RPAREN semicolon?
    | LPAREN parameters? RPAREN SEMICOLON?

parameters ::=
      required_parameters COMMA next_rest_key_parameter_list
    | required_parameters
    | next_rest_key_parameter_list

next_rest_key_parameter_list ::=
      HASH_NEXT variable_name COMMA rest_key_parameter_list
    | HASH_NEXT variable_name
    | rest_key_parameter_list

rest_key_parameter_list ::=
      HASH_REST variable_name COMMA key_parameter_list
    | HASH_REST variable_name
    | key_parameter_list

key_parameter_list ::=
      HASH_KEY COMMA HASH_ALL_KEYS
    | HASH_KEY keyword_parameters COMMA HASH_ALL_KEYS
    | HASH_KEY keyword_parameters
    | HASH_KEY

required_parameters ::= required_parameter (COMMA required_parameter)*

required_parameter ::=
      variable EQUAL_EQUAL expression
    | variable

keyword_parameters ::= keyword_parameter (COMMA keyword_parameter)*

keyword_parameter ::= symbol? variable default_value?

default_value ::= EQUAL expression

values_list ::=
      variables COMMA HASH_REST variable
    | variables
    | HASH_REST variable

/* Macro Definitions, page 421 */

macro_definition ::=
    macro_name main_rule_set aux_rule_sets? END MACRO_T? macro_name?

main_rule_set ::=
      body_style_definition_rules
    | list_style_definition_rules
    | statement_rules
    | function_rules

body_style_definition_rules ::= body_style_definition_rule+

list_style_definition_rules ::= list_style_definition_rule+

statement_rules ::= statement_rule+

function_rules ::= function_rule+

/*
 * The following two rules are altered in substance from
 * what appears in the BNF grammar, because that's inherently
 * ambiguous in this area.  The original rules follow the
 * word DEFINE with (roughly)
 *
 *   definition_head_opt macro_name pattern_opt
 *
 * but there's no way a stupid parser can tell which word
 * in a sequence corresponds to the macro_name, unless some
 * extra context-sensitive information is introduced.  Rather
 * than mandating such odd behavior, I've simply decided to
 * offload that work to the semantic analysis phase, and
 * to leave these rules as simple as possible.
 */

body_style_definition_rule ::= LBRACE DEFINE pattern SEMICOLON? END RBRACE EQUAL_ARROW rhs

list_style_definition_rule ::= LBRACE DEFINE pattern RBRACE EQUAL_ARROW rhs

rhs ::= LBRACE template? RBRACE SEMICOLON?

statement_rule ::= LBRACE macro_name maybe_pattern_and_semicolon END RBRACE EQUAL_ARROW rhs

function_rule ::= LBRACE macro_name LPAREN pattern? RPAREN RBRACE EQUAL_ARROW rhs

/* definition_head ::=
      modifier_pattern
    | definition_head modifier_pattern */

/* modifier_pattern ::=
      modifier
    | pattern_variable */

/* Patterns, pages 421-423 */

maybe_pattern_and_semicolon ::= pattern SEMICOLON? | SEMICOLON?

pattern ::= pattern_list (SEMICOLON pattern_list)*

pattern_list ::=
      pattern_sequence COMMA pattern_list
    | pattern_sequence
    | property_list_pattern

pattern_sequence ::= simple_pattern+

simple_pattern ::=
      name_not_end
    | EQUAL_ARROW
    | bracketed_pattern
    | binding_pattern
    | pattern_variable

bracketed_pattern ::=
      LPAREN pattern? RPAREN
    | LBRACKET pattern? RBRACKET
    | LBRACE pattern? RBRACE

binding_pattern ::=
      pattern_variable COLON_COLON pattern_variable EQUAL pattern_variable
    | pattern_variable COLON_COLON pattern_variable
    | pattern_variable EQUAL pattern_variable

pattern_variable ::=
      QUERY CONSTRAINED_NAME
    | QUERY word_name
    | ELLIPSIS

property_list_pattern ::=
      HASH_REST pattern_variable COMMA HASH_KEY pattern_keywords?
    | HASH_REST pattern_variable
    | HASH_KEY pattern_keywords?

pattern_keywords ::=
      HASH_ALL_KEYS
    | pattern_keyword COMMA pattern_keywords
    | pattern_keyword

pattern_keyword ::=
      QUERY word_name default_value?
    | QUERY CONSTRAINED_NAME default_value?
    | QUERY_QUERY word_name default_value?
    | QUERY_QUERY CONSTRAINED_NAME default_value?

/* Templates, pages 423-424 */

template ::= template_element+

template_element ::=
      word_name
    | symbol
    | NUMBER
    | CHARACTER_LITERAL
    | string
    | UNARY_OPERATOR_ONLY
    | separator
    | hash_word
    | DOT
    | COLON_COLON
    | EQUAL_ARROW
    | LPAREN template? RPAREN
    | LBRACKET template? RBRACKET
    | LBRACE template? RBRACE
    | HASH_PAREN template? RPAREN
    | HASH_BRACKET template? RBRACKET
    | PARSED_LIST_CONSTANT
    | PARSED_VECTOR_CONSTANT
    | substitution
    // FIXME
    | METHOD
    | FUNCTION

separator ::=
      SEMICOLON
    | COMMA
    | binary_operator
    /* idle thought:  what about moving '.' to here? */

substitution ::=
      name_prefix? QUERY name_string_or_symbol name_suffix?
    | QUERY_QUERY word_name separator? ELLIPSIS
    | ELLIPSIS
    | QUERY_EQUAL word_name

name_prefix ::= string HASH_HASH

name_suffix ::= HASH_HASH string

name_string_or_symbol ::= word_name | string | symbol

/* Auxiliary Rule Sets, page 424 */

aux_rule_sets ::= aux_rule_set+

aux_rule_set ::= symbol aux_rules

aux_rules ::= aux_rule+

aux_rule ::= LBRACE pattern+ RBRACE EQUAL_ARROW rhs
